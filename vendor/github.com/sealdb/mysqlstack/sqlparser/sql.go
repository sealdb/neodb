// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
	checksumOptionEnum    ChecksumOptionEnum
	optimizeOptionEnum    OptimizeOptionEnum
	checkOptionEnum       CheckOptionEnum
	checkOptionList       CheckOptionList
	deleteOptionsList     DeleteOptionList
	deleteOption          DeleteOptionEnum
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const DO = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALGORITHM = 57362
const BTREE = 57363
const CASCADE = 57364
const CONSTRAINT = 57365
const FULLTEXT = 57366
const HASH = 57367
const INDEXES = 57368
const KEY_BLOCK_SIZE = 57369
const KEYS = 57370
const PARSER = 57371
const RESTRICT = 57372
const RTREE = 57373
const SPATIAL = 57374
const SYMBOL = 57375
const TEMPORARY = 57376
const UNIQUE = 57377
const KEY = 57378
const ALL = 57379
const DISTINCT = 57380
const AS = 57381
const EXISTS = 57382
const ASC = 57383
const INTO = 57384
const DUPLICATE = 57385
const DEFAULT = 57386
const SET = 57387
const LOCK = 57388
const FULL = 57389
const CHANGED = 57390
const CHECK = 57391
const CHECKSUM = 57392
const FAST = 57393
const MEDIUM = 57394
const UPGRADE = 57395
const VALUES = 57396
const LAST_INSERT_ID = 57397
const NEXT = 57398
const VALUE = 57399
const SHARE = 57400
const MODE = 57401
const SQL_NO_CACHE = 57402
const SQL_CACHE = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const ID = 57415
const HEX = 57416
const STRING = 57417
const INTEGRAL = 57418
const FLOAT = 57419
const HEXNUM = 57420
const VALUE_ARG = 57421
const LIST_ARG = 57422
const COMMENT = 57423
const COMMENT_KEYWORD = 57424
const NULL = 57425
const TRUE = 57426
const FALSE = 57427
const OFF = 57428
const OR = 57429
const AND = 57430
const NOT = 57431
const BETWEEN = 57432
const CASE = 57433
const WHEN = 57434
const THEN = 57435
const ELSE = 57436
const END = 57437
const LE = 57438
const GE = 57439
const NE = 57440
const NULL_SAFE_EQUAL = 57441
const IS = 57442
const LIKE = 57443
const REGEXP = 57444
const IN = 57445
const SHIFT_LEFT = 57446
const SHIFT_RIGHT = 57447
const DIV = 57448
const MOD = 57449
const UNARY = 57450
const COLLATE = 57451
const BINARY = 57452
const INTERVAL = 57453
const JSON_EXTRACT_OP = 57454
const JSON_UNQUOTE_EXTRACT_OP = 57455
const CREATE = 57456
const ALTER = 57457
const DROP = 57458
const RENAME = 57459
const ANALYZE = 57460
const ADD = 57461
const MODIFY = 57462
const COLUMN = 57463
const IF = 57464
const IGNORE = 57465
const INDEX = 57466
const PRIMARY = 57467
const QUICK = 57468
const TABLE = 57469
const TO = 57470
const USING = 57471
const VIEW = 57472
const DESC = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const SHOW = 57476
const DATE = 57477
const ESCAPE = 57478
const HELP = 57479
const REPAIR = 57480
const TRUNCATE = 57481
const OPTIMIZE = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const CHARSET = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const GEOMETRY = 57517
const POINT = 57518
const LINESTRING = 57519
const POLYGON = 57520
const GEOMETRYCOLLECTION = 57521
const MULTIPOINT = 57522
const MULTILINESTRING = 57523
const MULTIPOLYGON = 57524
const NULLX = 57525
const AUTO_INCREMENT = 57526
const APPROXNUM = 57527
const SIGNED = 57528
const UNSIGNED = 57529
const ZEROFILL = 57530
const FIXED = 57531
const DYNAMIC = 57532
const STORAGE = 57533
const DISK = 57534
const MEMORY = 57535
const COLUMN_FORMAT = 57536
const AVG_ROW_LENGTH = 57537
const COMPRESSION = 57538
const CONNECTION = 57539
const DATA = 57540
const DIRECTORY = 57541
const DELAY_KEY_WRITE = 57542
const ENCRYPTION = 57543
const INSERT_METHOD = 57544
const MAX_ROWS = 57545
const MIN_ROWS = 57546
const PACK_KEYS = 57547
const PASSWORD = 57548
const ROW_FORMAT = 57549
const STATS_AUTO_RECALC = 57550
const STATS_PERSISTENT = 57551
const STATS_SAMPLE_PAGES = 57552
const TABLESPACE = 57553
const DELAYED = 57554
const LOW_PRIORITY = 57555
const HIGH_PRIORITY = 57556
const COMPRESSED = 57557
const REDUNDANT = 57558
const COMPACT = 57559
const TOKUDB_DEFAULT = 57560
const TOKUDB_FAST = 57561
const TOKUDB_SMALL = 57562
const TOKUDB_ZLIB = 57563
const TOKUDB_QUICKLZ = 57564
const TOKUDB_LZMA = 57565
const TOKUDB_SNAPPY = 57566
const TOKUDB_UNCOMPRESSED = 57567
const BINLOG = 57568
const COLLATION = 57569
const COLUMNS = 57570
const DATABASES = 57571
const EVENTS = 57572
const FIELDS = 57573
const GTID = 57574
const SCHEMAS = 57575
const STATUS = 57576
const TABLES = 57577
const VARIABLES = 57578
const WARNINGS = 57579
const CURRENT_TIMESTAMP = 57580
const CURRENT_DATE = 57581
const DATABASE = 57582
const SCHEMA = 57583
const CURRENT_TIME = 57584
const LOCALTIME = 57585
const LOCALTIMESTAMP = 57586
const UTC_DATE = 57587
const UTC_TIME = 57588
const UTC_TIMESTAMP = 57589
const REPLACE = 57590
const CONVERT = 57591
const CAST = 57592
const GROUP_CONCAT = 57593
const SEPARATOR = 57594
const MATCH = 57595
const AGAINST = 57596
const BOOLEAN = 57597
const LANGUAGE = 57598
const WITH = 57599
const QUERY = 57600
const EXPANSION = 57601
const UNUSED = 57602
const FORMAT = 57603
const TREE = 57604
const TRADITIONAL = 57605
const EXTENDED = 57606
const PARTITION = 57607
const PARTITIONS = 57608
const LIST = 57609
const XA = 57610
const DISTRIBUTED = 57611
const ENGINES = 57612
const VERSIONS = 57613
const PROCESSLIST = 57614
const QUERYZ = 57615
const TXNZ = 57616
const KILL = 57617
const ENGINE = 57618
const SINGLE = 57619
const BEGIN = 57620
const START = 57621
const TRANSACTION = 57622
const COMMIT = 57623
const ROLLBACK = 57624
const GLOBAL = 57625
const LOCAL = 57626
const SESSION = 57627
const NAMES = 57628
const ISOLATION = 57629
const LEVEL = 57630
const READ = 57631
const WRITE = 57632
const ONLY = 57633
const REPEATABLE = 57634
const COMMITTED = 57635
const UNCOMMITTED = 57636
const SERIALIZABLE = 57637
const NO_WRITE_TO_BINLOG = 57638
const NEODB = 57639
const ATTACH = 57640
const ATTACHLIST = 57641
const DETACH = 57642
const RESHARD = 57643
const CLEANUP = 57644
const RECOVER = 57645
const REBALANCE = 57646

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"DO",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHANGED",
	"CHECK",
	"CHECKSUM",
	"FAST",
	"MEDIUM",
	"UPGRADE",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"COLUMN",
	"IF",
	"IGNORE",
	"INDEX",
	"PRIMARY",
	"QUICK",
	"TABLE",
	"TO",
	"USING",
	"VIEW",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"DELAYED",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"BINLOG",
	"COLLATION",
	"COLUMNS",
	"DATABASES",
	"EVENTS",
	"FIELDS",
	"GTID",
	"SCHEMAS",
	"STATUS",
	"TABLES",
	"VARIABLES",
	"WARNINGS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NO_WRITE_TO_BINLOG",
	"NEODB",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5377

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 33,
	-2, 4,
	-1, 42,
	253, 458,
	287, 456,
	-2, 449,
	-1, 218,
	6, 392,
	7, 392,
	8, 392,
	9, 392,
	19, 392,
	73, 392,
	265, 392,
	-2, 957,
	-1, 429,
	128, 794,
	-2, 790,
	-1, 430,
	128, 795,
	-2, 791,
	-1, 464,
	100, 965,
	-2, 764,
	-1, 470,
	100, 814,
	-2, 742,
	-1, 491,
	1, 112,
	322, 112,
	-2, 122,
	-1, 530,
	5, 33,
	-2, 383,
	-1, 664,
	125, 122,
	175, 122,
	178, 122,
	181, 122,
	-2, 134,
	-1, 715,
	1, 112,
	322, 112,
	-2, 122,
	-1, 723,
	1, 113,
	322, 113,
	-2, 122,
	-1, 807,
	128, 797,
	-2, 793,
	-1, 856,
	74, 61,
	146, 61,
	-2, 543,
	-1, 880,
	125, 122,
	175, 122,
	178, 122,
	181, 122,
	-2, 135,
	-1, 937,
	36, 342,
	73, 342,
	76, 342,
	141, 342,
	-2, 962,
	-1, 1049,
	5, 34,
	-2, 592,
	-1, 1255,
	5, 33,
	-2, 713,
	-1, 1268,
	74, 61,
	146, 61,
	-2, 544,
	-1, 1471,
	5, 34,
	-2, 714,
	-1, 1510,
	5, 33,
	-2, 716,
	-1, 1571,
	5, 34,
	-2, 717,
}

const yyPrivate = 57344

const yyLast = 12170

var yyAct = [...]int{
	430, 1122, 1209, 1550, 1401, 1522, 1543, 1452, 594, 481,
	1402, 1581, 1556, 1398, 407, 436, 966, 65, 1272, 1102,
	1363, 405, 1336, 383, 849, 1147, 859, 1170, 986, 1101,
	1210, 972, 1211, 480, 1160, 1088, 1149, 76, 1093, 1084,
	1283, 806, 1094, 1252, 791, 132, 1229, 132, 224, 1042,
	850, 1034, 504, 212, 798, 528, 801, 738, 756, 1185,
	530, 3, 941, 1451, 374, 382, 725, 881, 465, 649,
	650, 463, 469, 642, 132, 627, 473, 894, 483, 622,
	982, 818, 523, 768, 722, 1150, 111, 800, 494, 724,
	460, 648, 640, 445, 132, 845, 132, 468, 633, 120,
	492, 739, 381, 362, 497, 364, 365, 656, 373, 127,
	64, 69, 119, 1013, 118, 546, 547, 433, 86, 435,
	223, 1115, 727, 372, 1114, 518, 867, 1116, 132, 432,
	1289, 1290, 1288, 116, 868, 869, 652, 545, 408, 58,
	651, 363, 620, 71, 72, 73, 74, 75, 30, 31,
	33, 34, 55, 366, 368, 367, 369, 370, 515, 371,
	478, 1006, 112, 519, 477, 878, 520, 434, 651, 507,
	652, 1487, 476, 1523, 1085, 462, 753, 1025, 475, 1606,
	1569, 1605, 744, 1536, 1601, 361, 1568, 35, 1535, 1242,
	1005, 57, 43, 30, 31, 33, 34, 58, 1580, 495,
	1394, 128, 1163, 512, 517, 88, 441, 1164, 1165, 92,
	516, 1017, 44, 502, 483, 62, 501, 97, 1133, 1213,
	1132, 1067, 1008, 526, 455, 454, 1558, 117, 748, 1180,
	105, 1004, 1502, 560, 559, 569, 570, 562, 563, 564,
	565, 566, 567, 568, 561, 1212, 360, 571, 1176, 965,
	1072, 746, 605, 1069, 1070, 510, 1582, 1175, 511, 1461,
	62, 123, 508, 1359, 122, 754, 755, 121, 451, 450,
	452, 535, 973, 37, 38, 39, 1389, 41, 1001, 999,
	995, 1387, 998, 1000, 1559, 1197, 1152, 1338, 758, 1199,
	61, 60, 59, 42, 115, 80, 47, 54, 40, 56,
	858, 834, 1010, 81, 758, 490, 85, 1125, 95, 129,
	94, 935, 30, 31, 33, 34, 90, 1338, 30, 31,
	33, 34, 87, 498, 1003, 529, 83, 84, 88, 96,
	110, 1484, 113, 1156, 1157, 1158, 114, 104, 1483, 1482,
	109, 1159, 403, 404, 488, 1068, 803, 1002, 487, 486,
	550, 549, 123, 58, 58, 122, 485, 123, 121, 1202,
	122, 973, 1201, 121, 1542, 1200, 1213, 551, 583, 584,
	132, 1474, 1098, 1558, 108, 102, 103, 106, 1287, 62,
	1379, 541, 543, 385, 726, 62, 126, 124, 125, 747,
	1196, 1534, 1212, 1151, 757, 917, 1503, 1369, 1099, 571,
	1429, 1431, 375, 1345, 1092, 1048, 1046, 32, 835, 1052,
	757, 860, 997, 1177, 1178, 82, 934, 540, 378, 1173,
	1174, 592, 537, 1007, 877, 550, 549, 45, 875, 1367,
	1109, 1559, 83, 84, 48, 132, 513, 49, 50, 996,
	52, 51, 551, 1594, 829, 1583, 564, 565, 566, 567,
	568, 561, 32, 1346, 571, 549, 53, 629, 132, 561,
	775, 551, 571, 473, 1244, 536, 819, 473, 473, 593,
	1430, 551, 1123, 1564, 773, 774, 772, 506, 1198, 1368,
	1091, 1053, 749, 1071, 468, 494, 655, 538, 657, 657,
	132, 132, 1560, 1155, 550, 549, 635, 819, 494, 1059,
	716, 1246, 630, 132, 494, 542, 542, 1027, 1028, 1029,
	1163, 551, 484, 132, 1603, 1164, 1165, 619, 580, 582,
	562, 563, 564, 565, 566, 567, 568, 561, 83, 84,
	571, 1054, 62, 1446, 653, 514, 831, 1447, 132, 1599,
	1524, 618, 771, 1372, 591, 1450, 1449, 595, 596, 597,
	598, 599, 600, 601, 631, 604, 606, 606, 606, 606,
	606, 606, 606, 606, 614, 615, 616, 617, 636, 769,
	743, 32, 637, 505, 742, 660, 1310, 32, 1371, 750,
	58, 78, 550, 549, 1309, 715, 550, 549, 763, 765,
	766, 473, 830, 1308, 764, 489, 1305, 1596, 730, 551,
	728, 1300, 1299, 551, 735, 473, 1298, 1333, 550, 549,
	752, 740, 797, 1189, 468, 1213, 1331, 1329, 1312, 132,
	1188, 91, 1558, 1181, 1024, 551, 820, 397, 396, 398,
	399, 400, 401, 473, 539, 1587, 402, 132, 132, 1464,
	132, 1212, 1332, 593, 1171, 836, 1172, 792, 473, 793,
	621, 1330, 1328, 1311, 840, 1448, 810, 1437, 1436, 1313,
	852, 805, 851, 1306, 1302, 807, 483, 1301, 1294, 468,
	823, 607, 608, 609, 610, 611, 612, 613, 1314, 503,
	1559, 1214, 1186, 1168, 811, 812, 795, 796, 815, 736,
	968, 969, 970, 971, 1365, 1604, 1600, 1496, 1585, 929,
	816, 826, 822, 1549, 824, 825, 979, 980, 981, 1500,
	974, 975, 976, 1274, 1277, 1278, 1279, 1275, 1148, 1276,
	1280, 58, 406, 1479, 552, 838, 1364, 1574, 621, 132,
	132, 908, 855, 848, 595, 1361, 808, 809, 861, 1358,
	132, 132, 1307, 988, 1117, 132, 870, 862, 1016, 821,
	794, 931, 1496, 1552, 1494, 375, 719, 132, 1547, 621,
	1496, 1526, 603, 718, 581, 1496, 1525, 130, 717, 216,
	1496, 621, 1493, 837, 569, 570, 562, 563, 564, 565,
	566, 567, 568, 561, 625, 628, 571, 769, 1475, 621,
	1492, 1018, 984, 985, 1208, 1022, 216, 1473, 621, 1021,
	989, 876, 1207, 1012, 473, 585, 586, 587, 588, 589,
	590, 1014, 1011, 1009, 1270, 621, 216, 496, 216, 1352,
	1351, 1348, 1349, 1348, 1347, 1044, 1040, 621, 560, 559,
	569, 570, 562, 563, 564, 565, 566, 567, 568, 561,
	1316, 1315, 571, 30, 548, 621, 744, 132, 665, 664,
	216, 1344, 1399, 737, 1089, 132, 1030, 1089, 132, 132,
	1469, 132, 548, 473, 1270, 1350, 1317, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 483, 744, 1040,
	66, 1090, 1259, 30, 468, 866, 1118, 1039, 1087, 375,
	1090, 1254, 30, 1251, 857, 759, 760, 761, 1100, 1058,
	864, 832, 1110, 647, 1056, 62, 442, 1528, 1076, 1124,
	62, 1127, 1128, 1129, 1130, 1131, 1077, 967, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1083, 1108, 752, 653, 1111, 1112, 1037, 770, 1040,
	1509, 1038, 375, 1270, 1047, 813, 814, 908, 1121, 1490,
	62, 30, 1089, 1049, 1050, 1051, 1040, 858, 1055, 62,
	1443, 1438, 987, 1061, 77, 1062, 1063, 1064, 1065, 1342,
	983, 978, 767, 62, 977, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	1253, 1478, 132, 132, 132, 1126, 1106, 1399, 1230, 1254,
	1182, 1183, 873, 1154, 1274, 1277, 1278, 1279, 1275, 993,
	1276, 1280, 1203, 1204, 28, 1205, 1119, 1120, 62, 992,
	1161, 991, 729, 844, 1232, 560, 559, 569, 570, 562,
	563, 564, 565, 566, 567, 568, 561, 1422, 1187, 571,
	1481, 1234, 1423, 1238, 473, 1233, 1420, 1231, 1193, 473,
	1480, 1421, 1236, 1424, 1194, 1278, 1279, 1216, 1419, 1418,
	446, 447, 1235, 1592, 1567, 1044, 1248, 1035, 468, 1073,
	468, 634, 1578, 1082, 1243, 1237, 1239, 1081, 1215, 132,
	1247, 1217, 440, 1218, 1213, 623, 1212, 1456, 1226, 632,
	1184, 661, 216, 1224, 638, 522, 132, 1223, 1240, 132,
	132, 1241, 1227, 521, 1467, 990, 1260, 132, 132, 731,
	1212, 852, 624, 851, 468, 805, 1282, 1228, 634, 807,
	483, 483, 443, 444, 1507, 1340, 1167, 1296, 1297, 1292,
	1293, 1258, 1166, 1265, 1303, 1304, 1269, 1286, 1266, 1267,
	1261, 1268, 1153, 1597, 1591, 1255, 1285, 1335, 1255, 1590,
	1441, 1213, 1295, 1589, 1440, 1080, 770, 216, 437, 1337,
	1442, 1264, 1506, 1079, 58, 807, 1060, 593, 663, 662,
	438, 66, 752, 1505, 1466, 1339, 1090, 1074, 1075, 628,
	646, 733, 1222, 1539, 1169, 828, 68, 534, 7, 1341,
	531, 6, 1031, 1032, 1033, 132, 533, 5, 532, 4,
	70, 63, 1, 483, 1343, 641, 457, 474, 1521, 723,
	940, 939, 216, 216, 1375, 1376, 1588, 79, 1579, 1555,
	1557, 1562, 1532, 1256, 1257, 216, 1256, 1529, 1531, 880,
	879, 479, 930, 946, 945, 216, 1362, 1106, 1360, 1179,
	964, 1105, 1374, 1373, 942, 1284, 944, 1382, 1383, 1357,
	1384, 1366, 132, 1386, 220, 1388, 1370, 483, 483, 951,
	751, 1291, 950, 1385, 874, 905, 1407, 1409, 1377, 1403,
	904, 132, 132, 132, 132, 852, 1411, 851, 1400, 903,
	902, 852, 132, 851, 1410, 132, 1396, 901, 900, 899,
	898, 1415, 1397, 1417, 897, 1286, 896, 895, 893, 1425,
	1414, 1412, 1416, 1413, 1107, 892, 891, 890, 889, 888,
	887, 886, 882, 885, 804, 751, 884, 1405, 1486, 804,
	804, 883, 949, 804, 1434, 1435, 947, 943, 670, 1353,
	1354, 1355, 668, 669, 667, 672, 671, 804, 804, 804,
	804, 216, 666, 1281, 491, 810, 1041, 93, 99, 1206,
	994, 213, 1337, 359, 473, 473, 473, 1195, 46, 216,
	216, 853, 856, 1444, 89, 579, 1078, 1445, 1162, 466,
	1380, 1113, 1381, 865, 863, 1453, 1453, 1453, 456, 459,
	473, 1392, 458, 1390, 1391, 1408, 1406, 833, 626, 1504,
	1106, 1465, 1057, 1404, 602, 58, 1457, 1458, 499, 817,
	500, 468, 384, 762, 395, 392, 1245, 394, 393, 1106,
	1106, 1106, 1106, 839, 1468, 1460, 553, 376, 1454, 1455,
	1428, 1104, 827, 1284, 1066, 431, 1427, 745, 214, 525,
	1477, 107, 524, 101, 100, 1432, 1433, 1262, 1263, 473,
	509, 1273, 1271, 1103, 473, 1250, 732, 1393, 1228, 1501,
	843, 216, 216, 453, 1220, 1221, 449, 1337, 948, 67,
	1453, 448, 1019, 216, 27, 1453, 26, 216, 1491, 15,
	1497, 24, 16, 14, 483, 473, 483, 13, 36, 216,
	1508, 11, 1105, 1512, 1403, 1514, 10, 9, 25, 8,
	1105, 473, 439, 1515, 29, 2, 1513, 473, 22, 23,
	21, 20, 1488, 19, 1530, 18, 17, 1489, 12, 98,
	932, 933, 1453, 1439, 1540, 1538, 0, 0, 1453, 473,
	473, 473, 804, 0, 1403, 0, 1545, 1546, 0, 473,
	1551, 0, 1554, 1510, 1561, 1565, 1463, 0, 0, 804,
	1544, 1544, 1544, 483, 1563, 1566, 0, 1470, 1471, 1472,
	1453, 1476, 1572, 1577, 1527, 0, 1584, 0, 0, 0,
	1586, 852, 0, 851, 1570, 0, 804, 0, 0, 216,
	0, 1485, 1541, 0, 0, 473, 0, 1096, 0, 0,
	216, 646, 1595, 751, 0, 0, 0, 0, 0, 1598,
	0, 0, 1553, 1395, 1495, 0, 1593, 1498, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1404, 1602,
	0, 1511, 0, 0, 0, 958, 957, 0, 0, 0,
	0, 1518, 1519, 1520, 954, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 0, 0, 1378, 0,
	0, 0, 0, 0, 1533, 0, 919, 0, 1404, 0,
	58, 0, 960, 0, 1105, 1105, 1105, 1105, 0, 0,
	0, 0, 0, 727, 1548, 959, 952, 0, 1105, 911,
	0, 0, 953, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1571, 0, 1573, 0, 1575, 1576,
	559, 569, 570, 562, 563, 564, 565, 566, 567, 568,
	561, 0, 0, 571, 906, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 216, 216, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 0, 0, 0, 0, 0, 524,
	0, 0, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	915, 0, 0, 804, 0, 0, 0, 0, 0, 751,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 962, 0, 0, 720, 721, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 1462, 853, 0, 0, 751, 0, 741, 1096, 0,
	909, 216, 751, 675, 0, 1516, 1517, 0, 0, 216,
	1096, 910, 912, 913, 914, 0, 916, 917, 918, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 0, 688,
	0, 0, 1537, 375, 0, 701, 704, 705, 706, 707,
	708, 709, 0, 710, 711, 712, 713, 714, 689, 690,
	691, 692, 673, 674, 702, 0, 676, 1219, 0, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 693,
	694, 695, 696, 697, 698, 699, 700, 560, 559, 569,
	570, 562, 563, 564, 565, 566, 567, 568, 561, 0,
	0, 571, 907, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 181, 524, 134, 0, 0, 0, 161, 0,
	165, 168, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 847, 847, 0, 854, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 171,
	0, 0, 189, 174, 0, 0, 0, 0, 0, 703,
	0, 0, 0, 0, 216, 0, 853, 0, 0, 0,
	472, 0, 853, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 216, 216, 216, 216, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 560, 559, 569, 570, 562,
	563, 564, 565, 566, 567, 568, 561, 0, 0, 571,
	0, 0, 0, 524, 1015, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1020, 0, 0, 0, 1023,
	0, 203, 0, 0, 0, 0, 145, 0, 0, 187,
	200, 1026, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 159, 0, 0, 196, 197, 146, 204, 0,
	0, 137, 0, 0, 180, 0, 195, 0, 0, 0,
	0, 0, 0, 0, 167, 153, 162, 184, 172, 185,
	163, 178, 177, 179, 0, 0, 0, 190, 0, 1036,
	158, 152, 194, 149, 175, 142, 135, 0, 143, 144,
	148, 147, 0, 166, 173, 176, 182, 183, 188, 560,
	559, 569, 570, 562, 563, 564, 565, 566, 567, 568,
	561, 0, 0, 571, 0, 0, 0, 0, 141, 0,
	0, 1086, 157, 0, 0, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 138, 170, 0, 186,
	155, 202, 160, 199, 198, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 191, 0,
	192, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 206,
	208, 207, 209, 139, 210, 211, 555, 0, 558, 0,
	0, 0, 0, 0, 572, 573, 574, 575, 576, 577,
	578, 0, 556, 557, 554, 560, 559, 569, 570, 562,
	563, 564, 565, 566, 567, 568, 561, 0, 0, 571,
	0, 0, 853, 0, 0, 0, 0, 0, 0, 0,
	342, 326, 281, 345, 254, 259, 271, 357, 273, 274,
	312, 233, 291, 181, 269, 134, 0, 234, 0, 161,
	0, 165, 168, 169, 0, 322, 1190, 1191, 1192, 334,
	343, 288, 0, 257, 226, 265, 227, 285, 151, 253,
	328, 294, 272, 236, 240, 0, 268, 299, 201, 351,
	171, 304, 0, 189, 174, 0, 0, 287, 331, 289,
	323, 280, 313, 246, 303, 346, 270, 309, 0, 0,
	0, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 306, 340, 267, 308, 311, 225, 305, 0, 229,
	235, 356, 338, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 286, 290, 319, 278, 0, 0, 0, 0,
	0, 0, 0, 1249, 258, 0, 302, 0, 0, 0,
	241, 231, 284, 0, 0, 0, 245, 0, 260, 320,
	0, 0, 0, 0, 276, 277, 279, 316, 315, 332,
	339, 347, 203, 255, 256, 266, 329, 145, 264, 275,
	187, 200, 310, 136, 336, 330, 300, 282, 283, 230,
	0, 318, 150, 159, 252, 307, 196, 197, 146, 204,
	237, 353, 137, 471, 352, 180, 470, 195, 337, 301,
	296, 232, 335, 298, 295, 167, 153, 162, 184, 172,
	185, 163, 178, 177, 179, 0, 228, 0, 190, 344,
	358, 158, 152, 194, 149, 175, 142, 135, 243, 143,
	144, 148, 147, 0, 166, 173, 176, 182, 183, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	242, 251, 0, 157, 0, 325, 193, 333, 0, 0,
	249, 247, 250, 324, 248, 292, 293, 348, 349, 350,
	321, 244, 0, 0, 327, 297, 133, 138, 170, 355,
	186, 155, 202, 160, 199, 198, 156, 0, 0, 0,
	0, 0, 263, 354, 317, 314, 341, 0, 154, 191,
	0, 192, 461, 0, 0, 464, 124, 125, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 208, 207, 209, 139, 210, 211, 342, 326, 281,
	345, 254, 259, 271, 357, 273, 274, 312, 233, 291,
	181, 269, 134, 0, 234, 0, 161, 0, 165, 168,
	169, 0, 322, 0, 0, 0, 334, 343, 288, 0,
	257, 226, 265, 227, 285, 151, 253, 328, 294, 272,
	236, 240, 0, 268, 299, 201, 351, 171, 304, 0,
	189, 174, 0, 0, 287, 331, 289, 323, 280, 313,
	246, 303, 346, 270, 309, 0, 0, 0, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 306, 340,
	267, 308, 311, 225, 305, 0, 229, 235, 356, 338,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 286,
	290, 319, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 0, 302, 0, 0, 0, 241, 231, 284,
	0, 0, 0, 245, 0, 260, 320, 0, 0, 0,
	0, 276, 277, 279, 316, 315, 332, 339, 347, 203,
	255, 256, 266, 329, 145, 264, 275, 187, 200, 310,
	136, 336, 330, 300, 282, 283, 230, 0, 318, 150,
	159, 252, 307, 196, 197, 146, 204, 237, 353, 137,
	471, 352, 180, 470, 195, 337, 301, 296, 232, 335,
	298, 295, 167, 153, 162, 184, 172, 185, 163, 178,
	177, 179, 0, 228, 0, 190, 344, 358, 158, 152,
	194, 149, 175, 142, 135, 243, 143, 144, 148, 147,
	0, 166, 173, 176, 182, 183, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 242, 251, 0,
	157, 0, 325, 193, 333, 0, 0, 249, 247, 250,
	324, 248, 292, 293, 348, 349, 350, 321, 244, 0,
	0, 327, 297, 133, 138, 170, 355, 186, 155, 202,
	160, 199, 198, 156, 0, 0, 0, 0, 0, 263,
	354, 317, 314, 341, 0, 154, 191, 0, 192, 0,
	0, 0, 464, 124, 125, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 208, 207,
	209, 139, 210, 211, 342, 326, 281, 345, 254, 259,
	271, 357, 273, 274, 312, 233, 291, 181, 269, 134,
	0, 234, 0, 161, 0, 165, 168, 169, 0, 322,
	0, 0, 0, 334, 343, 288, 0, 257, 226, 265,
	227, 285, 151, 253, 328, 294, 272, 236, 240, 0,
	268, 299, 201, 351, 171, 304, 0, 189, 174, 0,
	0, 287, 331, 289, 323, 280, 313, 246, 303, 346,
	270, 309, 0, 0, 0, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 306, 340, 267, 308, 311,
	225, 305, 0, 229, 235, 356, 338, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 286, 290, 319, 278,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	302, 0, 0, 0, 241, 231, 284, 0, 0, 0,
	245, 0, 260, 320, 0, 0, 0, 0, 276, 277,
	279, 316, 315, 332, 339, 347, 203, 255, 256, 266,
	329, 145, 264, 275, 187, 200, 310, 136, 336, 330,
	300, 282, 283, 230, 0, 318, 150, 159, 252, 307,
	196, 197, 146, 204, 237, 353, 137, 471, 352, 180,
	470, 195, 337, 301, 296, 232, 335, 298, 295, 167,
	153, 162, 184, 172, 185, 163, 178, 177, 179, 0,
	228, 0, 190, 344, 358, 158, 152, 194, 149, 175,
	142, 135, 243, 143, 144, 148, 147, 0, 166, 173,
	176, 182, 183, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 242, 251, 0, 157, 0, 325,
	193, 333, 0, 0, 249, 247, 250, 324, 248, 292,
	293, 348, 349, 350, 321, 244, 0, 0, 327, 297,
	133, 138, 170, 355, 186, 155, 202, 160, 199, 198,
	156, 0, 0, 0, 0, 0, 263, 354, 317, 314,
	341, 0, 154, 191, 0, 192, 654, 0, 0, 164,
	0, 0, 467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 208, 207, 209, 139, 210,
	211, 342, 326, 281, 345, 254, 259, 271, 357, 273,
	274, 312, 233, 291, 181, 269, 134, 0, 234, 0,
	161, 0, 165, 168, 169, 0, 322, 0, 0, 0,
	334, 343, 288, 0, 257, 226, 265, 227, 285, 151,
	253, 328, 294, 272, 236, 240, 0, 268, 299, 201,
	351, 171, 304, 0, 189, 174, 0, 0, 287, 331,
	289, 323, 280, 313, 246, 303, 346, 270, 309, 0,
	0, 0, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 306, 340, 267, 308, 311, 225, 305, 0,
	229, 235, 356, 338, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 286, 290, 319, 278, 0, 0, 0,
	0, 0, 0, 1459, 0, 258, 0, 302, 0, 0,
	0, 241, 231, 284, 0, 0, 0, 245, 0, 260,
	320, 0, 0, 0, 0, 276, 277, 279, 316, 315,
	332, 339, 347, 203, 255, 256, 266, 329, 145, 264,
	275, 187, 200, 310, 136, 336, 330, 300, 282, 283,
	230, 0, 318, 150, 159, 252, 307, 196, 197, 146,
	204, 237, 353, 137, 238, 352, 180, 239, 195, 337,
	301, 296, 232, 335, 298, 295, 167, 153, 162, 184,
	172, 185, 163, 178, 177, 179, 0, 228, 0, 190,
	344, 358, 158, 152, 194, 149, 175, 142, 135, 243,
	143, 144, 148, 147, 0, 166, 173, 176, 182, 183,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 242, 251, 0, 157, 0, 325, 193, 333, 0,
	0, 249, 247, 250, 324, 248, 292, 293, 348, 349,
	350, 321, 244, 0, 0, 327, 297, 133, 138, 170,
	355, 186, 155, 202, 160, 199, 198, 156, 0, 0,
	0, 0, 0, 263, 354, 317, 314, 341, 0, 154,
	191, 0, 192, 0, 0, 0, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 208, 207, 209, 139, 210, 211, 342, 326,
	281, 345, 254, 259, 271, 357, 273, 274, 312, 233,
	291, 181, 269, 134, 0, 234, 0, 161, 0, 165,
	168, 169, 0, 322, 0, 0, 0, 334, 343, 288,
	0, 257, 226, 265, 227, 285, 151, 253, 328, 294,
	272, 236, 240, 0, 268, 299, 201, 351, 171, 304,
	0, 189, 174, 0, 0, 287, 331, 289, 323, 280,
	313, 246, 303, 346, 270, 309, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 306,
	340, 267, 308, 311, 225, 305, 0, 229, 235, 356,
	338, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	286, 290, 319, 278, 0, 0, 0, 0, 0, 0,
	1109, 0, 258, 0, 302, 0, 0, 0, 241, 231,
	284, 0, 0, 0, 245, 0, 260, 320, 0, 0,
	0, 0, 276, 277, 279, 316, 315, 332, 339, 347,
	203, 255, 256, 266, 329, 145, 264, 275, 187, 200,
	310, 136, 336, 330, 300, 282, 283, 230, 0, 318,
	150, 159, 252, 307, 196, 197, 146, 204, 237, 353,
	137, 238, 352, 180, 239, 195, 337, 301, 296, 232,
	335, 298, 295, 167, 153, 162, 184, 172, 185, 163,
	178, 177, 179, 0, 228, 0, 190, 344, 358, 158,
	152, 194, 149, 175, 142, 135, 243, 143, 144, 148,
	147, 0, 166, 173, 176, 182, 183, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 242, 251,
	0, 157, 0, 325, 193, 333, 0, 0, 249, 247,
	250, 324, 248, 292, 293, 348, 349, 350, 321, 244,
	0, 0, 327, 297, 133, 138, 170, 355, 186, 155,
	202, 160, 199, 198, 156, 0, 0, 0, 0, 0,
	263, 354, 317, 314, 341, 0, 154, 191, 0, 192,
	0, 0, 0, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 208,
	207, 209, 139, 210, 211, 342, 326, 281, 345, 254,
	259, 271, 357, 273, 274, 312, 233, 291, 181, 269,
	134, 0, 234, 0, 161, 0, 165, 168, 169, 0,
	322, 0, 0, 0, 334, 343, 288, 0, 257, 226,
	265, 227, 285, 151, 253, 328, 294, 272, 236, 240,
	0, 268, 299, 201, 351, 171, 304, 0, 189, 174,
	0, 0, 287, 331, 289, 323, 280, 313, 246, 303,
	346, 270, 309, 0, 0, 0, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 306, 340, 267, 308,
	311, 225, 305, 0, 229, 235, 356, 338, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 286, 290, 319,
	278, 0, 0, 0, 0, 0, 0, 1225, 0, 258,
	0, 302, 0, 0, 0, 241, 231, 284, 0, 0,
	0, 245, 0, 260, 320, 0, 0, 0, 0, 276,
	277, 279, 316, 315, 332, 339, 347, 203, 255, 256,
	266, 329, 145, 264, 275, 187, 200, 310, 136, 336,
	330, 300, 282, 283, 230, 0, 318, 150, 159, 252,
	307, 196, 197, 146, 204, 237, 353, 137, 238, 352,
	180, 239, 195, 337, 301, 296, 232, 335, 298, 295,
	167, 153, 162, 184, 172, 185, 163, 178, 177, 179,
	0, 228, 0, 190, 344, 358, 158, 152, 194, 149,
	175, 142, 135, 243, 143, 144, 148, 147, 0, 166,
	173, 176, 182, 183, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 242, 251, 0, 157, 0,
	325, 193, 333, 0, 0, 249, 247, 250, 324, 248,
	292, 293, 348, 349, 350, 321, 244, 0, 0, 327,
	297, 133, 138, 170, 355, 186, 155, 202, 160, 199,
	198, 156, 0, 0, 0, 0, 0, 263, 354, 317,
	314, 341, 0, 154, 191, 0, 192, 0, 0, 0,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 208, 207, 209, 139,
	210, 211, 342, 326, 281, 345, 254, 259, 271, 357,
	273, 274, 312, 233, 291, 181, 269, 134, 0, 234,
	0, 161, 0, 165, 168, 169, 0, 322, 0, 0,
	0, 334, 343, 288, 0, 257, 226, 265, 227, 285,
	151, 253, 328, 294, 272, 236, 240, 0, 268, 299,
	201, 351, 171, 304, 0, 189, 174, 0, 0, 287,
	331, 289, 323, 280, 313, 246, 303, 346, 270, 309,
	0, 0, 0, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 306, 340, 267, 308, 311, 225, 305,
	0, 229, 235, 356, 338, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 286, 290, 319, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 302, 0,
	0, 0, 241, 231, 284, 0, 0, 0, 245, 0,
	260, 320, 0, 0, 0, 0, 276, 277, 279, 316,
	315, 332, 339, 347, 203, 255, 256, 266, 329, 145,
	264, 275, 187, 200, 310, 136, 336, 330, 300, 282,
	283, 230, 0, 318, 150, 159, 252, 307, 196, 197,
	146, 204, 237, 353, 137, 471, 352, 180, 470, 195,
	337, 301, 296, 232, 335, 298, 295, 167, 153, 162,
	184, 172, 185, 163, 178, 177, 179, 0, 228, 0,
	190, 344, 358, 158, 152, 194, 149, 175, 142, 135,
	243, 143, 144, 148, 147, 0, 166, 173, 176, 182,
	183, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 242, 251, 0, 157, 0, 325, 193, 333,
	0, 0, 249, 247, 250, 324, 248, 292, 293, 348,
	349, 350, 321, 244, 0, 0, 327, 297, 133, 138,
	170, 355, 186, 155, 202, 160, 199, 198, 156, 0,
	0, 0, 0, 0, 263, 354, 317, 314, 341, 0,
	154, 191, 0, 192, 0, 0, 0, 164, 0, 0,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 208, 207, 209, 139, 210, 211, 342,
	326, 281, 345, 254, 259, 271, 357, 273, 274, 312,
	233, 291, 181, 269, 134, 0, 234, 0, 161, 0,
	165, 168, 169, 0, 322, 0, 0, 0, 334, 343,
	288, 0, 257, 226, 265, 227, 285, 151, 253, 328,
	294, 272, 236, 240, 0, 268, 299, 201, 351, 171,
	304, 0, 189, 174, 0, 0, 287, 331, 289, 323,
	280, 313, 246, 303, 346, 270, 309, 0, 0, 0,
	221, 0, 222, 0, 0, 0, 0, 0, 0, 140,
	306, 340, 267, 308, 311, 225, 305, 0, 229, 235,
	356, 338, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 286, 290, 319, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 0, 302, 0, 0, 0, 241,
	231, 284, 0, 0, 0, 245, 0, 260, 320, 0,
	0, 0, 0, 276, 277, 279, 316, 315, 332, 339,
	347, 203, 255, 256, 266, 329, 145, 264, 275, 187,
	200, 310, 136, 336, 330, 300, 282, 283, 230, 0,
	318, 150, 159, 252, 307, 196, 197, 146, 204, 237,
	353, 137, 238, 352, 180, 239, 195, 337, 301, 296,
	232, 335, 298, 295, 167, 153, 162, 184, 172, 185,
	163, 178, 177, 179, 0, 228, 0, 190, 344, 358,
	158, 152, 194, 149, 175, 142, 135, 243, 143, 144,
	148, 147, 0, 166, 173, 176, 182, 183, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 242,
	251, 0, 157, 0, 325, 193, 333, 0, 0, 249,
	247, 250, 324, 248, 292, 293, 348, 349, 350, 321,
	244, 0, 0, 327, 297, 133, 138, 170, 355, 186,
	155, 202, 160, 199, 198, 156, 0, 0, 0, 0,
	0, 263, 354, 317, 314, 341, 0, 154, 191, 0,
	192, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 206,
	208, 207, 209, 139, 210, 211, 342, 326, 281, 345,
	254, 259, 271, 357, 273, 274, 312, 233, 291, 181,
	269, 134, 0, 234, 0, 161, 0, 165, 168, 169,
	0, 322, 0, 0, 0, 334, 343, 288, 0, 257,
	226, 265, 227, 285, 151, 253, 328, 294, 272, 236,
	240, 0, 268, 299, 201, 351, 171, 304, 0, 189,
	174, 0, 0, 287, 331, 289, 323, 280, 313, 246,
	303, 346, 270, 309, 0, 0, 0, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 306, 340, 267,
	308, 311, 225, 305, 0, 229, 235, 356, 338, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 286, 290,
	319, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 302, 0, 0, 0, 241, 231, 284, 0,
	0, 0, 245, 0, 260, 320, 0, 0, 0, 0,
	276, 277, 279, 316, 315, 332, 339, 347, 203, 255,
	256, 266, 329, 145, 264, 275, 187, 200, 310, 136,
	336, 330, 300, 282, 283, 230, 0, 318, 150, 159,
	252, 307, 196, 197, 146, 204, 237, 353, 137, 238,
	352, 180, 239, 195, 337, 301, 296, 232, 335, 298,
	295, 167, 153, 162, 184, 172, 185, 163, 178, 177,
	179, 0, 228, 0, 190, 344, 358, 158, 152, 194,
	149, 175, 142, 135, 243, 143, 144, 148, 147, 0,
	166, 173, 176, 182, 183, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 242, 251, 0, 157,
	0, 325, 193, 333, 0, 0, 249, 247, 250, 324,
	248, 292, 293, 348, 349, 350, 321, 244, 0, 0,
	327, 297, 133, 138, 170, 355, 186, 155, 202, 160,
	199, 198, 156, 0, 0, 0, 0, 0, 263, 354,
	317, 314, 341, 0, 154, 191, 0, 192, 0, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 206, 208, 207, 209,
	139, 210, 211, 342, 326, 281, 345, 254, 259, 271,
	357, 273, 274, 312, 233, 291, 181, 269, 134, 0,
	234, 0, 161, 0, 165, 168, 169, 0, 322, 0,
	0, 0, 334, 343, 288, 0, 257, 226, 265, 227,
	285, 151, 253, 328, 294, 272, 236, 240, 0, 268,
	299, 201, 351, 171, 304, 0, 189, 174, 0, 0,
	287, 331, 289, 323, 280, 313, 246, 303, 346, 270,
	309, 0, 0, 0, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 306, 340, 267, 308, 311, 225,
	305, 0, 229, 235, 356, 338, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 286, 290, 319, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 302,
	0, 0, 0, 241, 231, 284, 0, 0, 0, 245,
	0, 260, 320, 0, 0, 0, 0, 276, 277, 279,
	316, 315, 332, 339, 347, 203, 255, 256, 266, 329,
	145, 264, 275, 187, 200, 310, 136, 336, 330, 300,
	282, 283, 230, 0, 318, 150, 159, 252, 307, 196,
	197, 146, 204, 237, 353, 137, 238, 352, 180, 239,
	195, 337, 301, 296, 232, 335, 298, 295, 167, 153,
	162, 184, 172, 185, 163, 178, 177, 179, 0, 228,
	0, 190, 344, 358, 158, 152, 194, 149, 175, 142,
	135, 243, 143, 144, 148, 147, 0, 166, 173, 176,
	182, 183, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 242, 251, 0, 157, 0, 325, 193,
	333, 0, 0, 249, 247, 250, 324, 248, 292, 293,
	348, 349, 350, 321, 244, 0, 0, 327, 297, 133,
	138, 170, 355, 186, 155, 202, 160, 199, 198, 156,
	0, 0, 0, 0, 0, 263, 354, 317, 314, 341,
	0, 154, 191, 0, 192, 0, 0, 0, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 206, 208, 207, 209, 139, 210, 211,
	342, 326, 281, 345, 254, 259, 271, 357, 273, 274,
	312, 233, 291, 181, 269, 134, 0, 234, 0, 161,
	0, 165, 168, 169, 0, 322, 0, 0, 0, 334,
	343, 288, 0, 257, 226, 265, 227, 285, 151, 253,
	328, 294, 272, 236, 240, 0, 268, 299, 201, 351,
	171, 304, 0, 189, 174, 0, 0, 287, 331, 289,
	323, 280, 313, 246, 303, 346, 270, 309, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 306, 340, 267, 308, 311, 225, 305, 0, 229,
	235, 356, 338, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 286, 290, 319, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 302, 0, 0, 0,
	241, 231, 284, 0, 0, 0, 245, 0, 260, 320,
	0, 0, 0, 0, 276, 277, 279, 316, 315, 332,
	339, 347, 203, 255, 256, 266, 329, 145, 264, 275,
	187, 200, 310, 136, 336, 330, 300, 282, 283, 230,
	0, 318, 150, 159, 252, 307, 196, 197, 146, 204,
	237, 353, 137, 238, 352, 180, 239, 195, 337, 301,
	296, 232, 335, 298, 295, 167, 153, 162, 184, 172,
	185, 163, 178, 177, 179, 0, 228, 0, 190, 344,
	358, 158, 152, 194, 149, 175, 142, 135, 243, 143,
	144, 148, 147, 0, 166, 173, 176, 182, 183, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	242, 251, 0, 157, 0, 325, 193, 333, 0, 0,
	249, 247, 250, 324, 248, 292, 293, 348, 349, 350,
	321, 244, 0, 0, 327, 297, 133, 138, 170, 355,
	186, 155, 202, 160, 199, 198, 156, 0, 0, 0,
	0, 0, 263, 354, 317, 314, 341, 0, 154, 191,
	0, 192, 0, 0, 0, 164, 181, 0, 134, 0,
	0, 0, 161, 0, 165, 168, 169, 0, 0, 205,
	206, 208, 207, 209, 139, 210, 211, 0, 380, 0,
	0, 151, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 416, 171, 0, 0, 189, 174, 0, 0,
	0, 0, 409, 410, 0, 0, 0, 0, 0, 0,
	871, 62, 0, 0, 429, 397, 396, 398, 399, 400,
	401, 0, 0, 140, 402, 403, 404, 872, 0, 0,
	377, 390, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 0, 0, 0, 0, 427,
	0, 389, 0, 0, 386, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 425, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	145, 0, 0, 187, 200, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 159, 0, 0, 196,
	197, 146, 204, 0, 0, 137, 0, 0, 180, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 167, 153,
	162, 184, 172, 185, 163, 178, 177, 179, 0, 0,
	0, 190, 0, 0, 158, 152, 194, 149, 175, 142,
	135, 0, 143, 144, 148, 147, 0, 166, 173, 176,
	182, 183, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 157, 0, 0, 193,
	0, 0, 0, 417, 423, 426, 0, 424, 421, 422,
	420, 419, 418, 428, 411, 412, 414, 0, 413, 133,
	138, 170, 0, 186, 155, 202, 160, 199, 198, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 191, 0, 192, 0, 0, 0, 164, 0,
	181, 0, 134, 0, 0, 0, 161, 0, 165, 168,
	169, 0, 205, 206, 208, 207, 209, 139, 210, 211,
	799, 0, 380, 0, 0, 151, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 416, 171, 0, 0,
	189, 174, 0, 0, 0, 0, 409, 410, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 429, 397,
	396, 398, 399, 400, 401, 0, 0, 140, 402, 403,
	404, 0, 0, 0, 377, 390, 0, 415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 387, 388, 802,
	0, 0, 0, 427, 0, 389, 0, 0, 386, 391,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 145, 0, 0, 187, 200, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	159, 0, 0, 196, 197, 146, 204, 0, 0, 137,
	0, 0, 180, 0, 195, 0, 0, 0, 0, 0,
	0, 0, 167, 153, 162, 184, 172, 185, 163, 178,
	177, 179, 0, 0, 0, 190, 0, 0, 158, 152,
	194, 149, 175, 142, 135, 0, 143, 144, 148, 147,
	0, 166, 173, 176, 182, 183, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	157, 0, 0, 193, 0, 0, 0, 417, 423, 426,
	0, 424, 421, 422, 420, 419, 418, 428, 411, 412,
	414, 0, 413, 133, 138, 170, 0, 186, 155, 202,
	160, 199, 198, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 191, 0, 192, 0,
	0, 0, 164, 181, 0, 134, 0, 0, 0, 161,
	0, 165, 168, 169, 0, 0, 205, 206, 208, 207,
	209, 139, 210, 211, 0, 380, 0, 0, 151, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 416,
	171, 0, 0, 189, 174, 0, 0, 0, 0, 409,
	410, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	621, 429, 397, 396, 398, 399, 400, 401, 0, 0,
	140, 402, 403, 404, 0, 0, 0, 377, 390, 0,
	415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	387, 388, 0, 0, 0, 0, 427, 0, 389, 0,
	0, 386, 391, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 425, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 145, 0, 0,
	187, 200, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 159, 0, 0, 196, 197, 146, 204,
	0, 0, 137, 0, 0, 180, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 167, 153, 162, 184, 172,
	185, 163, 178, 177, 179, 0, 0, 0, 190, 0,
	0, 158, 152, 194, 149, 175, 142, 135, 0, 143,
	144, 148, 147, 0, 166, 173, 176, 182, 183, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 157, 0, 0, 193, 0, 0, 0,
	417, 423, 426, 0, 424, 421, 422, 420, 419, 418,
	428, 411, 412, 414, 0, 413, 133, 138, 170, 0,
	186, 155, 202, 160, 199, 198, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 191,
	0, 192, 0, 0, 0, 164, 181, 0, 134, 0,
	0, 0, 161, 0, 165, 168, 169, 0, 0, 205,
	206, 208, 207, 209, 139, 210, 211, 0, 380, 0,
	0, 151, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 416, 171, 0, 0, 189, 174, 0, 0,
	0, 0, 409, 410, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 429, 397, 396, 398, 399, 400,
	401, 0, 0, 140, 402, 403, 404, 0, 0, 0,
	377, 390, 0, 415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 387, 388, 802, 0, 0, 0, 427,
	0, 389, 0, 0, 386, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 425, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	145, 0, 0, 187, 200, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 159, 0, 0, 196,
	197, 146, 204, 0, 0, 137, 0, 0, 180, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 167, 153,
	162, 184, 172, 185, 163, 178, 177, 179, 0, 0,
	0, 190, 0, 0, 158, 152, 194, 149, 175, 142,
	135, 0, 143, 144, 148, 147, 0, 166, 173, 176,
	182, 183, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 157, 0, 0, 193,
	0, 0, 0, 417, 423, 426, 0, 424, 421, 422,
	420, 419, 418, 428, 411, 412, 414, 0, 413, 133,
	138, 170, 0, 186, 155, 202, 160, 199, 198, 156,
	0, 0, 0, 0, 0, 0, 0, 30, 0, 0,
	0, 154, 191, 0, 192, 0, 0, 0, 164, 181,
	0, 134, 0, 0, 0, 161, 0, 165, 168, 169,
	0, 0, 205, 206, 208, 207, 209, 139, 210, 211,
	0, 380, 0, 0, 151, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 416, 171, 0, 0, 189,
	174, 0, 0, 0, 0, 409, 410, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 429, 397, 396,
	398, 399, 400, 401, 0, 0, 140, 402, 403, 404,
	0, 0, 0, 377, 390, 0, 415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 387, 388, 0, 0,
	0, 0, 427, 0, 389, 0, 0, 386, 391, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	425, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 145, 0, 0, 187, 200, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 159,
	0, 0, 196, 197, 146, 204, 0, 0, 137, 0,
	0, 180, 0, 195, 0, 0, 0, 0, 0, 0,
	0, 167, 153, 162, 184, 172, 185, 163, 178, 177,
	179, 0, 0, 0, 190, 0, 0, 158, 152, 194,
	149, 175, 142, 135, 0, 143, 144, 148, 147, 0,
	166, 173, 176, 182, 183, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 157,
	0, 0, 193, 0, 0, 0, 417, 423, 426, 0,
	424, 421, 422, 420, 419, 418, 428, 411, 412, 414,
	0, 413, 133, 138, 170, 0, 186, 155, 202, 160,
	199, 198, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 191, 0, 192, 0, 0,
	0, 164, 181, 0, 134, 0, 0, 0, 161, 0,
	165, 168, 169, 0, 0, 205, 206, 208, 207, 209,
	139, 210, 211, 0, 380, 0, 0, 151, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 416, 171,
	0, 0, 189, 174, 0, 0, 0, 0, 409, 410,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	429, 397, 396, 398, 399, 400, 401, 0, 0, 140,
	402, 403, 404, 0, 0, 0, 377, 390, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 387,
	388, 0, 0, 0, 0, 427, 0, 389, 0, 0,
	386, 391, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 425, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 145, 0, 0, 187,
	200, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 159, 0, 0, 196, 197, 146, 204, 0,
	0, 137, 0, 0, 180, 0, 195, 0, 0, 0,
	0, 0, 0, 0, 167, 153, 162, 184, 172, 185,
	163, 178, 177, 179, 0, 0, 0, 190, 0, 0,
	158, 152, 194, 149, 175, 142, 135, 0, 143, 144,
	148, 147, 0, 166, 173, 176, 182, 183, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 157, 0, 0, 193, 0, 0, 0, 417,
	423, 426, 0, 424, 421, 422, 420, 419, 418, 428,
	411, 412, 414, 0, 413, 133, 138, 170, 0, 186,
	155, 202, 160, 199, 198, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 191, 0,
	192, 181, 0, 134, 164, 0, 0, 161, 0, 165,
	168, 169, 0, 0, 0, 0, 0, 0, 205, 206,
	208, 207, 209, 139, 210, 211, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 416, 171, 0,
	0, 189, 174, 0, 0, 0, 0, 409, 410, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 429,
	397, 396, 398, 399, 400, 401, 0, 0, 140, 402,
	403, 404, 0, 0, 0, 0, 390, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 387, 388,
	0, 0, 0, 0, 427, 0, 389, 0, 0, 386,
	391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 425, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 145, 0, 0, 187, 200,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 159, 0, 0, 196, 197, 146, 204, 0, 0,
	137, 0, 0, 180, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 167, 153, 162, 184, 172, 185, 163,
	178, 177, 179, 0, 0, 0, 190, 0, 0, 158,
	152, 194, 149, 175, 142, 135, 0, 143, 144, 148,
	147, 0, 166, 173, 176, 182, 183, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 157, 0, 0, 193, 0, 0, 0, 417, 423,
	426, 0, 424, 421, 422, 420, 419, 418, 428, 411,
	412, 414, 0, 413, 133, 138, 170, 0, 186, 155,
	202, 160, 199, 198, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 191, 0, 192,
	0, 0, 0, 164, 181, 0, 134, 0, 0, 0,
	161, 0, 165, 168, 169, 0, 0, 205, 206, 208,
	207, 209, 139, 210, 211, 1043, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 171, 0, 0, 189, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 472, 0, 1045, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 145, 0,
	0, 187, 200, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 159, 0, 0, 196, 197, 146,
	204, 0, 0, 137, 0, 0, 180, 0, 195, 0,
	0, 0, 0, 0, 0, 0, 167, 153, 162, 184,
	172, 185, 163, 178, 177, 179, 0, 0, 0, 190,
	0, 0, 158, 152, 194, 149, 175, 142, 135, 0,
	143, 144, 148, 147, 0, 166, 173, 176, 182, 183,
	188, 181, 0, 134, 0, 0, 938, 937, 0, 165,
	168, 169, 0, 0, 0, 936, 0, 0, 0, 935,
	141, 0, 0, 0, 157, 0, 151, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 171, 0,
	0, 189, 174, 0, 0, 0, 0, 133, 138, 170,
	0, 186, 155, 202, 160, 199, 198, 156, 0, 482,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 154,
	191, 0, 192, 0, 0, 0, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 208, 207, 209, 139, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 145, 0, 0, 187, 200,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 159, 0, 0, 196, 197, 146, 204, 0, 0,
	137, 0, 0, 180, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 167, 153, 162, 184, 172, 185, 163,
	178, 177, 179, 0, 0, 0, 190, 0, 0, 158,
	152, 194, 149, 175, 142, 135, 0, 143, 144, 148,
	147, 639, 166, 173, 176, 182, 183, 188, 181, 0,
	134, 0, 0, 0, 161, 0, 165, 168, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 157, 0, 151, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 171, 0, 0, 189, 174,
	0, 0, 0, 0, 133, 138, 170, 0, 186, 155,
	202, 160, 199, 198, 156, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 154, 191, 0, 192,
	0, 0, 0, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 208,
	207, 209, 139, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	645, 0, 0, 643, 0, 0, 0, 203, 0, 0,
	0, 0, 145, 0, 0, 187, 200, 0, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 159, 0,
	0, 196, 197, 146, 204, 0, 0, 137, 0, 0,
	180, 0, 195, 0, 0, 0, 0, 0, 0, 0,
	167, 153, 162, 184, 172, 185, 163, 178, 177, 179,
	0, 0, 0, 190, 0, 0, 158, 152, 194, 149,
	175, 142, 135, 0, 143, 144, 148, 147, 0, 166,
	173, 176, 182, 183, 188, 0, 0, 0, 0, 0,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 157, 0,
	0, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 138, 170, 0, 186, 155, 202, 160, 199,
	198, 156, 0, 0, 0, 30, 0, 0, 0, 0,
	0, 0, 0, 154, 191, 0, 192, 181, 0, 134,
	164, 0, 0, 161, 0, 165, 168, 169, 0, 0,
	0, 0, 0, 0, 205, 206, 208, 207, 209, 139,
	210, 211, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 171, 0, 0, 189, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 145, 0, 0, 187, 200, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 159, 0, 0,
	196, 197, 146, 204, 0, 0, 137, 0, 0, 180,
	0, 195, 0, 0, 0, 0, 0, 0, 0, 167,
	153, 162, 184, 172, 185, 163, 178, 177, 179, 0,
	0, 0, 190, 0, 0, 158, 152, 194, 149, 175,
	142, 135, 0, 143, 144, 148, 147, 0, 166, 173,
	176, 182, 183, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 157, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 138, 170, 0, 186, 155, 202, 160, 199, 198,
	156, 0, 0, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 154, 191, 0, 192, 181, 0, 134, 164,
	0, 0, 161, 0, 165, 168, 169, 0, 0, 0,
	0, 0, 0, 205, 206, 208, 207, 209, 139, 210,
	211, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 171, 0, 0, 189, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 482, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	145, 0, 0, 187, 200, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 159, 0, 0, 196,
	197, 146, 204, 0, 0, 137, 0, 0, 180, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 167, 153,
	162, 184, 172, 185, 163, 178, 177, 179, 0, 0,
	0, 190, 0, 0, 158, 152, 194, 149, 175, 142,
	135, 0, 143, 144, 148, 147, 0, 166, 173, 176,
	182, 183, 188, 181, 0, 134, 0, 0, 0, 161,
	0, 165, 168, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 1095, 0, 157, 0, 151, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	171, 0, 0, 189, 174, 0, 0, 0, 0, 133,
	138, 170, 0, 186, 155, 202, 160, 199, 198, 156,
	0, 131, 0, 1097, 0, 0, 0, 0, 0, 0,
	140, 154, 191, 0, 192, 0, 0, 0, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 206, 208, 207, 209, 139, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 145, 0, 0,
	187, 200, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 159, 0, 0, 196, 197, 146, 204,
	0, 0, 137, 0, 0, 180, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 167, 153, 162, 184, 172,
	185, 163, 178, 177, 179, 0, 0, 0, 190, 0,
	0, 158, 152, 194, 149, 175, 142, 135, 0, 143,
	144, 148, 147, 0, 166, 173, 176, 182, 183, 188,
	181, 0, 134, 0, 0, 0, 161, 0, 165, 168,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 157, 0, 151, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 171, 0, 0,
	189, 174, 0, 0, 0, 0, 133, 138, 170, 0,
	186, 155, 202, 160, 199, 198, 156, 0, 472, 0,
	0, 841, 0, 0, 842, 0, 0, 140, 154, 191,
	0, 192, 0, 0, 0, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 208, 207, 209, 139, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 145, 0, 0, 187, 200, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	159, 0, 0, 196, 197, 146, 204, 0, 0, 137,
	0, 0, 180, 0, 195, 0, 0, 0, 0, 0,
	0, 0, 167, 153, 162, 184, 172, 185, 163, 178,
	177, 179, 0, 0, 0, 190, 0, 0, 158, 152,
	194, 149, 175, 142, 135, 0, 143, 144, 148, 147,
	0, 166, 173, 176, 182, 183, 188, 0, 0, 0,
	181, 0, 134, 0, 0, 0, 161, 0, 165, 168,
	169, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	157, 0, 0, 193, 0, 151, 659, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 171, 0, 0,
	189, 174, 0, 133, 138, 170, 0, 186, 155, 202,
	160, 199, 198, 156, 0, 0, 0, 0, 472, 0,
	658, 0, 0, 0, 0, 154, 191, 140, 192, 0,
	0, 0, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 208, 207,
	209, 139, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 145, 0, 0, 187, 200, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	159, 0, 0, 196, 197, 146, 204, 0, 0, 137,
	0, 0, 180, 0, 195, 0, 0, 0, 0, 0,
	0, 0, 167, 153, 162, 184, 172, 185, 163, 178,
	177, 179, 0, 0, 0, 190, 0, 0, 158, 152,
	194, 149, 175, 142, 135, 0, 143, 144, 148, 147,
	0, 166, 173, 176, 182, 183, 188, 181, 0, 134,
	0, 0, 0, 161, 0, 165, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	157, 0, 151, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 171, 0, 0, 189, 174, 0,
	0, 0, 0, 133, 138, 170, 0, 186, 155, 202,
	160, 199, 198, 156, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 154, 191, 0, 192, 0,
	0, 0, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 208, 207,
	209, 139, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 145, 0, 0, 187, 200, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 159, 0, 0,
	196, 197, 146, 204, 0, 0, 137, 0, 0, 180,
	0, 195, 0, 0, 0, 0, 0, 0, 0, 167,
	153, 162, 184, 172, 185, 163, 178, 177, 179, 0,
	0, 0, 190, 0, 0, 158, 152, 194, 149, 175,
	142, 135, 0, 143, 144, 148, 147, 0, 166, 173,
	176, 182, 183, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 157, 0, 0,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 138, 170, 0, 186, 155, 202, 217, 199, 198,
	218, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 191, 0, 192, 181, 0, 134, 164,
	0, 0, 161, 0, 165, 168, 169, 0, 0, 0,
	0, 0, 0, 205, 206, 208, 207, 209, 139, 210,
	211, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 171, 0, 0, 189, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	145, 0, 0, 187, 200, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 159, 0, 0, 196,
	197, 146, 204, 0, 0, 137, 0, 0, 180, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 167, 153,
	162, 184, 172, 185, 163, 178, 177, 179, 0, 0,
	0, 190, 0, 0, 158, 152, 194, 149, 175, 142,
	135, 0, 143, 144, 148, 147, 0, 166, 173, 176,
	182, 183, 188, 181, 0, 134, 0, 0, 0, 161,
	0, 165, 168, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 157, 0, 151, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	171, 0, 0, 189, 174, 0, 0, 0, 0, 133,
	138, 170, 0, 186, 155, 202, 160, 199, 198, 156,
	0, 131, 0, 1097, 0, 0, 0, 0, 0, 0,
	140, 154, 191, 0, 192, 0, 0, 0, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 206, 208, 207, 209, 139, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 145, 0, 0,
	187, 200, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 159, 0, 0, 196, 197, 146, 204,
	0, 0, 137, 0, 0, 180, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 167, 153, 162, 184, 172,
	185, 163, 178, 177, 179, 0, 0, 0, 190, 0,
	0, 158, 152, 194, 149, 175, 142, 135, 0, 143,
	144, 148, 147, 0, 166, 173, 176, 182, 183, 188,
	181, 0, 134, 0, 0, 0, 161, 0, 165, 168,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 157, 0, 151, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 171, 0, 0,
	189, 174, 0, 0, 0, 0, 133, 138, 170, 0,
	186, 155, 202, 160, 199, 198, 156, 0, 472, 0,
	1045, 0, 0, 0, 0, 0, 0, 140, 154, 191,
	0, 192, 0, 0, 0, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 208, 207, 209, 139, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 145, 0, 0, 187, 200, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	159, 0, 0, 196, 197, 146, 204, 0, 0, 137,
	0, 0, 180, 0, 195, 0, 0, 0, 0, 0,
	0, 0, 167, 153, 162, 184, 172, 185, 163, 178,
	177, 179, 0, 0, 0, 190, 0, 0, 158, 152,
	194, 149, 175, 142, 135, 0, 143, 144, 148, 147,
	0, 166, 173, 176, 182, 183, 188, 181, 0, 134,
	0, 0, 0, 161, 0, 165, 168, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	157, 846, 151, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 171, 0, 0, 189, 174, 0,
	0, 0, 0, 133, 138, 170, 0, 186, 155, 202,
	160, 199, 198, 156, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 154, 191, 0, 192, 0,
	0, 0, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 208, 207,
	209, 139, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 145, 0, 0, 187, 200, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 159, 0, 0,
	196, 197, 146, 204, 0, 0, 137, 0, 0, 180,
	0, 195, 0, 0, 0, 0, 0, 0, 0, 167,
	153, 162, 184, 172, 185, 163, 178, 177, 179, 0,
	0, 0, 190, 0, 0, 158, 152, 194, 149, 175,
	142, 135, 0, 143, 144, 148, 147, 0, 166, 173,
	176, 182, 183, 188, 181, 0, 134, 0, 0, 0,
	161, 0, 165, 168, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 157, 0, 151,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 201,
	0, 171, 0, 0, 189, 174, 0, 0, 0, 0,
	133, 138, 170, 0, 186, 155, 202, 160, 199, 198,
	156, 0, 482, 0, 527, 0, 0, 0, 0, 0,
	0, 140, 154, 191, 0, 192, 0, 0, 0, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 208, 207, 209, 139, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 145, 0,
	0, 187, 200, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 159, 0, 0, 196, 197, 146,
	204, 0, 0, 137, 0, 0, 180, 0, 195, 0,
	0, 0, 0, 0, 0, 0, 167, 153, 162, 184,
	172, 185, 163, 178, 177, 179, 0, 0, 0, 190,
	0, 0, 158, 152, 194, 149, 175, 142, 135, 0,
	143, 144, 148, 147, 0, 166, 173, 176, 182, 183,
	188, 181, 0, 134, 0, 0, 0, 161, 0, 165,
	168, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 157, 0, 151, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 0, 171, 0,
	0, 189, 174, 0, 0, 0, 0, 133, 138, 170,
	0, 186, 155, 202, 160, 199, 198, 156, 0, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 154,
	191, 0, 192, 0, 0, 0, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 208, 207, 209, 139, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 145, 0, 0, 187, 200,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 159, 0, 0, 196, 197, 146, 204, 0, 0,
	137, 0, 0, 180, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 167, 153, 162, 184, 172, 185, 163,
	178, 177, 179, 0, 0, 0, 190, 0, 0, 158,
	152, 194, 149, 175, 142, 135, 0, 143, 144, 148,
	147, 0, 166, 173, 176, 182, 183, 188, 181, 0,
	134, 0, 0, 0, 161, 0, 165, 168, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 157, 0, 151, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 171, 0, 0, 189, 174,
	0, 0, 0, 0, 133, 138, 170, 0, 186, 155,
	202, 160, 199, 198, 156, 0, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 154, 191, 0, 192,
	0, 0, 0, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 208,
	207, 209, 139, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 145, 0, 0, 187, 200, 0, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 159, 0,
	0, 196, 197, 146, 204, 0, 0, 137, 0, 0,
	180, 0, 195, 0, 0, 0, 0, 0, 0, 0,
	167, 153, 162, 184, 172, 185, 163, 178, 177, 179,
	0, 0, 0, 190, 0, 0, 158, 152, 194, 149,
	175, 142, 135, 0, 143, 144, 148, 147, 0, 166,
	173, 176, 182, 183, 188, 181, 0, 134, 0, 0,
	0, 161, 0, 165, 168, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 157, 0,
	151, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 171, 0, 0, 189, 174, 0, 0, 0,
	0, 133, 138, 170, 0, 186, 155, 202, 160, 199,
	198, 156, 0, 429, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 154, 191, 0, 192, 0, 0, 0,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 208, 207, 209, 139,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 145,
	0, 0, 187, 200, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 159, 0, 0, 196, 197,
	146, 204, 0, 0, 137, 0, 0, 180, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 167, 153, 162,
	184, 172, 185, 163, 178, 177, 179, 0, 0, 0,
	190, 0, 0, 158, 152, 194, 149, 175, 142, 135,
	0, 143, 144, 148, 147, 0, 166, 173, 176, 182,
	183, 188, 181, 0, 134, 0, 0, 0, 161, 0,
	165, 168, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 157, 0, 151, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 171,
	0, 0, 189, 174, 0, 0, 0, 0, 133, 138,
	170, 0, 186, 155, 202, 160, 199, 198, 156, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	154, 191, 0, 192, 0, 0, 0, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 208, 207, 209, 139, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 145, 0, 0, 187,
	200, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 159, 0, 0, 196, 197, 146, 204, 0,
	0, 137, 0, 0, 180, 0, 195, 0, 0, 0,
	0, 0, 0, 0, 167, 153, 162, 184, 172, 185,
	163, 178, 177, 179, 0, 0, 0, 190, 0, 0,
	158, 152, 194, 149, 175, 142, 135, 0, 143, 144,
	148, 147, 0, 166, 173, 176, 182, 183, 188, 181,
	0, 134, 0, 0, 0, 161, 0, 165, 168, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 157, 0, 151, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 171, 0, 0, 189,
	174, 0, 0, 0, 0, 133, 138, 170, 0, 186,
	155, 202, 160, 199, 198, 156, 0, 1334, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 154, 191, 0,
	192, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 206,
	208, 207, 209, 139, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 145, 0, 0, 187, 200, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 159,
	0, 0, 196, 197, 146, 204, 0, 0, 137, 0,
	0, 180, 0, 195, 0, 0, 0, 0, 0, 0,
	0, 167, 153, 162, 184, 172, 185, 163, 178, 177,
	179, 0, 0, 0, 190, 0, 0, 158, 152, 194,
	149, 175, 142, 135, 0, 143, 144, 148, 147, 0,
	166, 173, 176, 182, 183, 188, 181, 0, 134, 0,
	0, 0, 161, 0, 165, 168, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 157,
	0, 151, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 171, 0, 0, 189, 174, 0, 0,
	0, 0, 133, 138, 170, 0, 186, 155, 202, 160,
	199, 198, 156, 0, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 154, 191, 0, 192, 0, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 206, 208, 207, 209,
	139, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	145, 0, 0, 187, 200, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 159, 0, 0, 196,
	197, 146, 204, 0, 0, 137, 0, 0, 180, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 167, 153,
	162, 184, 172, 185, 163, 178, 177, 179, 0, 0,
	0, 190, 0, 0, 158, 152, 194, 149, 175, 142,
	135, 0, 143, 144, 148, 147, 0, 166, 173, 176,
	182, 183, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 157, 0, 0, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	138, 170, 0, 186, 155, 202, 160, 199, 198, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 191, 0, 192, 0, 0, 0, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 206, 208, 207, 209, 139, 210, 211,
}

var yyPact = [...]int{
	142, -1000, -212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1156, 1181,
	-1000, -1000, -1000, -1000, -1000, -1000, 891, 271, 65, 175,
	166, 164, 86, 57, 11434, -1000, 9499, 4484, -29, -1000,
	-156, -1000, -1000, -162, -1000, 7134, -184, 57, 877, -1000,
	-1000, -1000, -1000, -1000, -1000, 1141, 1154, 900, 1085, 1000,
	-1000, 39, -5, 11434, -1000, 2265, -122, 11020, 217, 208,
	207, 203, 217, -1000, -1000, -1000, 161, 11848, -1000, 57,
	741, 184, -1000, 11434, -1000, 11434, -31, 69, 465, -118,
	10, 425, -1000, -1000, -1000, -41, -1000, -49, -1000, 1141,
	465, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1058, 1050, -1000, -1000, -1000, 11434, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10606, 306, 187, 294, 387, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 555,
	-1000, -1000, -1000, -1000, -1000, -1000, 832, 832, -1000, 11434,
	-1000, -1000, -183, -1000, 788, 496, -1000, 7134, 2134, 832,
	832, -1000, -1000, 239, -1000, -1000, 7413, 7413, 7413, 7413,
	7413, 7413, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 832, 293, -1000, 6851, 832,
	832, 832, 832, 832, 832, 7134, 832, 832, 832, 832,
	832, 832, 832, 832, 832, 832, 832, 832, 832, -1000,
	-1000, 57, -1000, -1000, 11434, 575, 1066, 7134, 7134, 1156,
	-1000, 877, -1000, -1000, -1000, 1033, -1000, -1000, 412, 188,
	-1000, -1000, -1000, 188, -1000, -1000, 1049, 8110, 829, -1000,
	-1000, -136, 2899, -1000, -1000, 386, 9292, 9292, -1000, -1000,
	-1000, 1046, -1000, -1000, -1000, -1000, -1000, 1153, 1152, 774,
	-1000, 1697, -1000, -1000, 11848, 408, 692, 687, 680, 11434,
	11434, 78, -1000, -1000, -1000, 184, 950, 11848, 1069, -1000,
	-1000, 1170, 11434, 11848, -1000, 611, 7134, -1000, 425, 425,
	-1000, -1000, 11434, -1000, -1000, -1000, 425, 465, -1000, -1000,
	-1000, -1000, -1000, 108, -1000, -1000, -1000, -1000, -1000, 14,
	-1000, -1000, -1000, -1000, -1000, -1000, 382, 5435, -14, -1000,
	-1000, -1000, 7134, -1000, 265, -1000, -1000, -1000, 7134, 7134,
	7134, 502, 354, 7413, 459, 366, 7413, 7413, 7413, 7413,
	7413, 7413, 7413, 7413, 7413, 7413, 7413, 7413, 7413, 7413,
	7413, 571, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	674, -1000, 877, 550, 550, 274, 274, 274, 274, 274,
	1904, 6002, 4801, 575, 770, 6851, 6568, 6568, 7134, 7134,
	6568, 1080, 370, 496, 10813, -1000, 575, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6568, 6568, 6568, 6568, 11434, 804,
	-1000, -1000, -1000, 1177, 334, 518, 827, -1000, 260, 1141,
	575, 1000, 9082, 960, -1000, -1000, 10399, 10399, 11227, 11434,
	883, -1000, -1000, -1000, -1000, -1000, 283, 2582, -1000, 826,
	811, -179, -173, -1000, -136, 5718, -1000, -1000, -1000, -1000,
	303, -1000, 832, 140, 1619, 7903, 1580, 45, -1000, -1000,
	-1000, 844, -1000, 844, 844, 844, 844, 94, 94, 94,
	94, -1000, -1000, -1000, -1000, -1000, 901, 898, -1000, 844,
	844, 844, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	897, 897, 897, 889, 889, 78, 1065, 949, 947, 937,
	-1000, 146, -1000, 78, -1000, 177, -195, -1000, 11434, 11434,
	-1000, -1000, 1141, -38, -1000, -1000, -1000, 496, 465, 11434,
	11434, 425, 465, -1000, 11434, -1000, -1000, -1000, 545, -102,
	-1000, -1000, -1000, -1000, -1000, -1000, 11434, -1000, -1000, 496,
	354, 364, -1000, -1000, 421, -1000, -1000, 717, -1000, -1000,
	-1000, -1000, 459, 7413, 7413, 7413, 914, 717, 2018, 661,
	1578, 274, 329, 329, 337, 337, 337, 337, 337, 405,
	405, -1000, -1000, -1000, 575, -1000, -1000, -1000, 575, 6568,
	805, -1000, -1000, 7696, 278, 832, 277, -1000, -1000, -1000,
	575, 752, 752, 335, 492, 752, 6568, 401, -1000, 7134,
	575, -1000, 752, 575, 752, 752, 804, 202, -1000, 1011,
	7134, 7134, 7134, -1000, -1000, -1000, 1066, -1000, 1080, 1144,
	-1000, 1023, 1019, 6568, -1000, -108, 11434, -1000, -108, 878,
	-1000, 380, -1000, 276, 8875, 226, 270, 9778, 11434, -1000,
	3533, -1000, 4167, -1000, -170, -1000, -164, -185, -1000, -1000,
	-1000, -1000, -1000, 496, -1000, 668, 11020, 832, 832, -1000,
	1619, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 372, 372, 182, 372,
	372, 372, 372, 372, 4, 2, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, -1000,
	-1000, 642, 275, 251, -1000, -1000, -1000, -1000, 1109, -1000,
	1580, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 407, 255, -1000, 1096, -1000, 1090, 605,
	1176, 568, 213, 204, 24, -1000, -1000, 544, 94, 94,
	-1000, -1000, -1000, 1045, -1000, -1000, -1000, 604, 604, -1000,
	-1000, -1000, -1000, 541, -1000, -1000, -1000, 534, -1000, -1000,
	-1000, 11434, 11434, 11434, -1000, 249, 378, 144, 227, 224,
	221, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	372, 372, -1000, 372, 772, 1064, -1000, 603, -1000, -1000,
	425, 1164, -1000, -1000, -1000, 312, -1000, -1000, -1000, -1000,
	-1000, 914, 717, 1786, -1000, 7413, 7413, -1000, -1000, 752,
	6568, -1000, -1000, 10192, -1000, -1000, 3850, 6568, 5118, -1000,
	-1000, -1000, 872, 571, 872, -82, 865, 365, -1000, 7134,
	404, -1000, -1000, -1000, -1000, -1000, -1000, 1027, -1000, -1000,
	-1000, -1000, -1000, 1007, 496, 496, -1000, -1000, 11434, -1000,
	-1000, -1000, -1000, 882, 945, 832, -1000, 837, 1156, 11227,
	7134, 7134, 4801, -108, -1000, 9985, -1000, -1000, 9778, 3533,
	869, 942, -1000, -1000, -1000, 1077, 8389, 8875, -1000, -1000,
	250, -1000, -1000, -1000, -174, -180, -1000, -1000, 575, 11020,
	11020, -1000, 590, -1000, 568, 372, 372, 527, 523, 522,
	589, 586, 372, 372, 517, 585, 666, 514, 505, 497,
	574, 581, 634, 573, 572, 563, 11641, 141, -1000, 642,
	-1000, 1089, 275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 896, -1000, -1000, -1000, -1000, -1000, -1000, -53,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 776, -1000, -1000, 327, 749, -1000, 747, 791, 745,
	832, 832, 832, -1000, 11434, -1000, -1000, -1000, 663, 85,
	891, 659, 11020, 650, 353, 499, -1000, -1000, -1000, -1000,
	1131, 1040, 372, 372, -1000, 465, -1000, -1000, -1000, 7413,
	717, 717, -1000, -1000, -1000, -1000, 252, 575, -1000, 575,
	844, 844, -1000, 844, 889, -1000, 844, 118, 844, 113,
	575, 575, 832, -69, -1000, 496, 7134, -1000, -1000, -1000,
	1164, 9778, 925, 11227, 832, -1000, 8668, 11020, -1000, 11227,
	1141, -1000, 496, 496, -1000, 1164, -1000, 869, 250, -1000,
	9778, 9778, 9778, 9778, -1000, 997, 996, -1000, 984, 975,
	991, 11434, -1000, 740, 8389, 330, -1000, 313, -1000, -1000,
	-1000, -1000, 575, 575, -1000, -1000, 568, 568, -1000, -1000,
	-1000, -1000, -1000, 580, 579, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 888, -1000, 1129, 887,
	141, 642, 458, -1000, -1000, -1000, -1000, -1000, 577, -1000,
	467, -1000, 466, 10813, 10813, 10813, -1000, -1000, -1000, 1042,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 650, 650, -1000, 717, 3216,
	-1000, -1000, -1000, 183, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7413, 575, 561, 496, 1161, 790, -1000, 1061,
	780, 786, -1000, -1000, 6285, 575, 723, 243, 714, -1000,
	783, -1000, 1156, -1000, 942, 919, 651, -1000, -1000, -1000,
	-1000, 988, -1000, 978, -1000, -1000, -1000, -1000, -1000, 198,
	197, 190, 832, -112, -1000, -1000, -1000, -1000, 10813, -1000,
	-1000, -1000, -1000, 10813, 876, 141, -1000, 715, -1000, 697,
	679, 696, -1000, 844, 696, 696, 633, -1000, -1000, -1000,
	-1000, -1000, 122, -1000, -1000, 1159, 1146, 1088, -1000, 832,
	-1000, -1000, 886, 11020, 10813, 11020, -1000, 1141, 7134, 7134,
	-1000, -1000, 832, 832, 832, -109, -1000, 461, 691, 686,
	10813, 834, -1000, -1000, -1000, -1000, 10813, -1000, -1000, -1000,
	-1000, 575, 119, -92, -1000, 7134, 7134, 1175, -1000, 832,
	-1000, 877, 236, -1000, -1000, -1000, 496, 496, 10813, 10813,
	10813, 684, -1000, 627, -1000, -1000, -1000, 678, 10813, 346,
	-1000, 199, 595, -1000, 1005, -87, -96, 496, 788, 11227,
	786, 575, 11020, 653, -1000, 653, 653, -109, -1000, 1018,
	171, 171, -1000, 623, -1000, -1000, -1000, -1000, 372, 557,
	1128, -1000, -1000, -1000, 1115, -1000, -1000, -1000, 1004, -1000,
	783, -1000, -1000, -1000, 10813, -1000, -1000, -1000, 333, -1000,
	372, -1000, 519, 1114, 171, -1000, 460, -1000, -1000, -1000,
	-1000, 620, -90, -1000, 832, 435, -1000, 619, 171, -1000,
	-1000, -94, -1000, -1000, -1000, -97, -1000,
}

var yyPgo = [...]int{
	0, 11, 22, 1513, 1511, 1510, 25, 581, 1509, 1508,
	1506, 1505, 1503, 55, 1501, 1500, 1499, 1498, 1495, 60,
	1014, 1494, 1492, 1198, 1196, 1190, 1187, 1489, 1488, 1487,
	1486, 1481, 1478, 1477, 1473, 1472, 1471, 1469, 1466, 1464,
	111, 1461, 1459, 34, 1458, 1456, 1453, 98, 1450, 93,
	1449, 1447, 1446, 51, 87, 54, 56, 346, 1445, 40,
	29, 19, 1443, 1442, 18, 1441, 1304, 95, 73, 1440,
	101, 1434, 1433, 1431, 52, 1429, 1428, 1427, 1425, 1424,
	1422, 82, 92, 1421, 1420, 6, 35, 1417, 1416, 43,
	102, 418, 1413, 1408, 1407, 1405, 1404, 1403, 83, 8,
	4, 14, 10, 1402, 383, 23, 1399, 81, 1394, 1392,
	1391, 1389, 17, 1388, 75, 1387, 15, 79, 1386, 39,
	1385, 13, 24, 50, 1382, 1379, 71, 90, 91, 70,
	1374, 69, 1373, 1371, 107, 1369, 1368, 1366, 118, 1365,
	104, 512, 1364, 1358, 1357, 1353, 1350, 1349, 1348, 1347,
	109, 58, 26, 72, 0, 21, 68, 49, 1346, 9,
	722, 41, 42, 38, 100, 1344, 57, 1343, 53, 44,
	99, 46, 1342, 1336, 1335, 1334, 1333, 1332, 1328, 16,
	1327, 1326, 1322, 1321, 1318, 1316, 1313, 1312, 1311, 1310,
	1309, 1308, 1307, 1306, 1305, 1298, 77, 1297, 1296, 1294,
	1290, 1289, 1288, 1287, 1280, 1279, 1270, 1265, 31, 1264,
	1262, 1259, 1256, 27, 1254, 86, 1, 66, 1251, 80,
	28, 1246, 65, 1244, 1240, 1239, 1234, 1233, 59, 33,
	1232, 85, 36, 37, 1231, 1230, 1229, 67, 7, 63,
	1228, 1227, 1222, 3, 12, 1221, 1220, 1219, 1218, 2,
	30, 32, 1217, 1216, 20, 1211, 1210, 62, 84, 1209,
	89, 5, 1208, 1207, 1206, 1205, 1202, 1201, 138, 142,
	1200, 252,
}

var yyR1 = [...]int{
	0, 266, 267, 267, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 19,
	19, 19, 20, 21, 21, 22, 22, 23, 23, 24,
	24, 45, 45, 45, 45, 46, 46, 46, 120, 120,
	119, 119, 25, 26, 26, 26, 265, 265, 265, 264,
	264, 152, 152, 68, 68, 82, 82, 28, 27, 27,
	262, 262, 261, 184, 184, 7, 7, 29, 29, 29,
	29, 29, 263, 263, 263, 263, 263, 263, 253, 253,
	254, 254, 246, 244, 244, 241, 241, 247, 247, 240,
	240, 245, 245, 242, 242, 249, 249, 249, 249, 249,
	250, 251, 258, 258, 259, 259, 212, 212, 260, 260,
	260, 260, 217, 217, 216, 216, 215, 215, 215, 218,
	218, 218, 32, 233, 235, 235, 236, 236, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 186, 188, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 201, 202, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 204, 204, 205, 205, 206, 206, 207, 207,
	189, 213, 213, 187, 183, 185, 234, 234, 234, 229,
	159, 159, 172, 172, 172, 172, 255, 255, 256, 256,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	175, 175, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 174, 174, 174, 174, 174, 176, 176, 176, 176,
	176, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 178, 178, 178, 178,
	178, 178, 178, 178, 228, 228, 179, 179, 219, 219,
	220, 220, 220, 224, 224, 225, 225, 223, 223, 180,
	180, 180, 180, 180, 180, 44, 43, 43, 43, 136,
	136, 136, 221, 208, 208, 208, 182, 209, 209, 210,
	210, 210, 211, 211, 211, 226, 226, 227, 227, 181,
	230, 230, 230, 230, 6, 6, 248, 248, 248, 248,
	243, 243, 4, 4, 4, 1, 2, 2, 3, 3,
	3, 5, 5, 232, 232, 231, 231, 239, 239, 238,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 165,
	165, 142, 142, 147, 147, 147, 31, 31, 31, 81,
	81, 149, 149, 9, 33, 10, 143, 143, 143, 75,
	75, 75, 11, 13, 13, 13, 13, 13, 76, 76,
	76, 76, 76, 76, 12, 12, 12, 12, 214, 214,
	214, 214, 214, 14, 145, 145, 145, 15, 17, 17,
	17, 17, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	52, 52, 72, 72, 72, 166, 166, 70, 70, 71,
	71, 69, 69, 74, 74, 74, 148, 148, 73, 73,
	8, 8, 77, 77, 77, 37, 150, 150, 35, 78,
	78, 78, 38, 79, 79, 79, 79, 79, 79, 80,
	80, 39, 36, 270, 40, 41, 41, 42, 42, 42,
	49, 49, 49, 47, 47, 48, 48, 55, 55, 54,
	54, 56, 56, 56, 56, 158, 158, 158, 157, 157,
	58, 58, 59, 59, 60, 60, 61, 61, 61, 83,
	62, 62, 62, 62, 167, 167, 163, 163, 163, 162,
	162, 63, 63, 63, 63, 64, 64, 64, 64, 65,
	65, 67, 67, 66, 66, 84, 84, 84, 84, 85,
	85, 86, 86, 57, 57, 57, 57, 57, 57, 57,
	139, 139, 222, 222, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 97, 97, 97, 97, 97, 97,
	88, 88, 88, 88, 88, 88, 88, 53, 53, 98,
	98, 98, 104, 99, 99, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 95, 95, 95, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 94, 94, 94,
	94, 94, 94, 94, 94, 271, 271, 96, 96, 96,
	96, 50, 50, 50, 50, 50, 169, 169, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 108, 108, 51, 51, 106, 106, 107, 109, 109,
	105, 105, 105, 90, 90, 90, 90, 90, 90, 90,
	92, 92, 92, 110, 110, 111, 111, 112, 112, 113,
	113, 114, 115, 115, 115, 116, 116, 116, 116, 117,
	117, 117, 89, 89, 89, 89, 89, 89, 118, 118,
	118, 118, 121, 121, 100, 100, 102, 102, 101, 103,
	122, 122, 123, 124, 124, 127, 127, 126, 126, 126,
	126, 126, 135, 135, 134, 134, 134, 125, 125, 128,
	128, 132, 132, 131, 133, 133, 133, 133, 130, 130,
	129, 129, 170, 170, 170, 137, 137, 140, 140, 141,
	141, 138, 138, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 151, 151, 151, 144, 144, 252, 252,
	155, 155, 156, 156, 160, 160, 161, 161, 164, 164,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 268, 269, 168,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	6, 7, 10, 1, 3, 1, 3, 8, 9, 7,
	8, 0, 1, 1, 1, 0, 1, 1, 1, 3,
	0, 4, 8, 10, 7, 8, 1, 1, 1, 0,
	2, 0, 2, 2, 4, 1, 3, 2, 3, 3,
	1, 3, 5, 0, 2, 1, 1, 3, 5, 11,
	11, 11, 0, 1, 1, 5, 9, 7, 1, 1,
	1, 1, 2, 3, 2, 0, 2, 1, 1, 0,
	2, 1, 3, 0, 2, 0, 1, 1, 2, 2,
	3, 3, 0, 1, 1, 2, 1, 1, 4, 4,
	2, 4, 0, 1, 0, 1, 1, 2, 2, 1,
	1, 1, 4, 4, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 4, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 3, 3, 4, 1, 3, 3, 3,
	1, 1, 3, 1, 1, 1, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 3, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 4, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 3, 4, 1,
	1, 1, 1, 0, 3, 3, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 1, 2,
	7, 7, 8, 9, 0, 1, 3, 1, 2, 3,
	0, 2, 0, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 3, 2,
	6, 7, 7, 7, 9, 7, 7, 7, 4, 0,
	1, 0, 1, 0, 1, 1, 6, 6, 4, 1,
	3, 0, 1, 3, 3, 2, 1, 1, 1, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 3,
	3, 3, 1, 1, 3, 5, 3, 6, 0, 1,
	1, 1, 1, 2, 0, 1, 1, 3, 2, 3,
	2, 2, 3, 3, 2, 5, 2, 2, 3, 3,
	3, 5, 4, 4, 3, 3, 5, 6, 7, 2,
	2, 3, 5, 2, 4, 2, 3, 3, 2, 3,
	0, 3, 1, 1, 1, 0, 2, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 1, 0, 1,
	1, 1, 0, 1, 1, 4, 1, 1, 2, 0,
	1, 1, 4, 2, 1, 1, 1, 1, 1, 0,
	2, 4, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 1, 2, 3, 3, 3,
	2, 3, 1, 2, 1, 1, 1, 2, 3, 2,
	2, 0, 2, 3, 2, 2, 2, 1, 0, 2,
	2, 2, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0,
}

var yyChk = [...]int{
	-1000, -266, -18, -19, -23, -24, -25, -26, -27, -29,
	-30, -31, -9, -33, -34, -37, -35, -10, -11, -12,
	-14, -15, -17, -16, -36, -28, -38, -39, -20, -21,
	6, 7, 265, 8, 9, 45, -32, 131, 132, 133,
	156, 135, 151, 50, 70, 285, -143, 154, 292, 295,
	296, 299, 298, 314, 155, 10, 157, 49, -268, 150,
	149, 148, 73, -267, 322, -112, 15, -42, 5, -40,
	-270, -40, -40, -40, -40, -40, -233, 73, -7, -252,
	24, 32, 144, 257, 258, 35, -138, 257, 140, -142,
	141, -7, 34, -149, 144, 144, 243, 131, -8, -148,
	-71, -72, 289, 290, 251, 144, 291, -73, 288, 254,
	244, -215, 76, 246, 250, 208, 47, 141, 28, 26,
	-170, 181, 178, 175, 301, 302, 300, -150, 144, 252,
	-160, 76, -154, 271, 20, 212, 158, 177, 272, 319,
	85, 244, 211, 214, 215, 152, 173, 217, 216, 209,
	167, 43, 207, 191, 293, 276, 281, 248, 206, 168,
	278, 24, 192, 196, 300, 26, 219, 190, 27, 28,
	273, 55, 194, 220, 59, 210, 221, 198, 197, 199,
	180, 18, 222, 223, 193, 195, 275, 155, 224, 58,
	203, 294, 296, 251, 208, 182, 171, 172, 280, 279,
	156, 53, 277, 147, 174, 314, 315, 317, 316, 318,
	320, 321, -168, -66, -76, 135, -160, 278, 281, 283,
	-214, 76, 78, -153, -154, 91, 39, 41, 201, 94,
	164, 126, 186, 16, 22, 95, 48, 175, 178, 181,
	49, 125, 245, 213, 266, 131, 68, 256, 259, 255,
	257, 246, 169, 44, 9, 148, 149, 38, 119, 10,
	133, 98, 99, 287, 153, 40, 150, 88, 51, 19,
	71, 11, 47, 13, 14, 154, 139, 140, 110, 141,
	66, 7, 162, 163, 127, 42, 107, 62, 36, 64,
	108, 17, 260, 261, 46, 189, 185, 270, 188, 52,
	161, 184, 121, 69, 56, 92, 86, 170, 89, 72,
	157, 90, 15, 67, 290, 143, 142, 289, 166, 109,
	134, 265, 30, 65, 258, 250, 6, 269, 45, 151,
	160, 63, 144, 252, 34, 187, 159, 183, 97, 145,
	87, 291, 5, 35, 204, 8, 70, 146, 262, 263,
	264, 54, 179, 176, 288, 274, 96, 12, 205, -145,
	275, 214, -168, 297, -168, -168, 315, 317, 316, 318,
	319, 321, 285, -168, -99, -57, -87, 92, -91, 44,
	40, -90, -222, -105, -103, -104, 126, 115, 116, 123,
	93, 127, -95, -93, -94, -96, 78, 77, 79, 80,
	81, 82, 86, 87, 88, -155, -160, -101, -268, 64,
	65, 266, 267, 270, 268, 95, 54, 255, 264, 263,
	262, 260, 261, 256, 259, 139, 257, 121, 265, 76,
	-154, -78, 313, 301, -150, -19, -116, 17, 16, -22,
	-20, -268, 6, 37, 38, -49, 60, 61, -41, -45,
	230, 229, 231, -46, 230, 229, -66, -264, -124, -125,
	-127, 297, -170, -126, 300, -156, -135, 303, -155, -153,
	181, 178, 76, -154, -263, 300, 294, 286, 282, -234,
	-229, -159, 76, -154, -141, 139, 141, 141, 141, -141,
	144, -165, -164, 76, -154, -150, 76, -140, 139, -66,
	-66, 247, 144, -7, -74, 108, 12, 287, 252, -69,
	245, 248, -70, 11, 110, -168, 251, 253, -116, -74,
	-168, 45, 45, -81, -66, -75, -159, 78, -13, 19,
	-19, -25, -23, -24, -26, -13, 278, 128, 100, 79,
	-168, -101, -268, -101, -66, 320, 298, 299, 74, 91,
	90, 107, -57, -88, 110, 92, 108, 109, 94, 112,
	111, 122, 115, 116, 117, 118, 119, 120, 121, 113,
	114, 125, 100, 101, 102, 103, 104, 105, 106, -139,
	-268, -104, -268, 129, 130, -91, -91, -91, -91, -91,
	-91, -268, 128, -19, -99, -268, -268, -268, -268, -268,
	-268, -268, -108, -57, -268, -271, -268, -271, -271, -271,
	-271, -271, -271, -271, -268, -268, -268, -268, -150, -81,
	-269, 75, -117, 19, 46, -57, -113, -114, -57, -112,
	-19, -40, 56, -47, 38, 84, -138, -138, 45, 11,
	-82, -265, -68, 143, 230, 140, -160, 74, -128, -131,
	-129, 304, 306, -126, 297, 100, -134, -155, 78, 44,
	-134, 45, 16, 16, 75, 74, -172, -175, -177, -176,
	-178, -173, -174, 175, 176, 126, 179, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 45, 152, 171,
	172, 173, 174, 192, 193, 194, 195, 196, 197, 198,
	199, 158, 177, 272, 159, 160, 161, 162, 163, 164,
	166, 167, 168, 169, 170, -164, 92, 76, 76, 76,
	-66, -66, -258, -259, -260, -217, 306, 44, -140, 72,
	-164, 40, -52, 11, -66, -164, 78, -57, -166, -70,
	-70, -66, -166, -74, 74, -77, 143, 281, 214, 100,
	-161, -160, -153, 190, 279, 280, -151, 145, 39, -57,
	-57, -57, -97, 86, 92, 87, 88, -91, -98, -101,
	-104, 83, 110, 108, 109, 94, -91, -91, -91, -91,
	-91, -91, -91, -91, -91, -91, -91, -91, -91, -91,
	-91, -169, 76, 78, 76, -90, -90, -155, -55, 38,
	-54, -56, 117, -57, -160, -156, -161, -153, -269, -269,
	-19, -54, -54, -57, -57, -54, -47, -106, -107, 96,
	-155, -269, -54, -55, -54, -54, -81, -80, 8, 110,
	74, 18, 74, -115, 41, 148, -116, -269, -49, -92,
	-155, 79, 82, -48, 63, -67, 42, -66, -67, -122,
	-123, -105, -155, -160, -66, -82, -160, 11, 74, -152,
	128, -127, -170, -130, 74, -132, 74, 305, 307, 308,
	-128, 72, 89, -57, -209, 125, -268, 284, 25, -235,
	-236, -237, -187, -183, -185, -186, -188, -189, -190, -191,
	-192, -193, -194, -195, -196, -197, -198, -199, -200, -201,
	-202, -203, -204, -205, -206, -207, 85, 293, -217, 201,
	212, 50, 213, 214, 215, 141, 217, 218, 219, 27,
	220, 221, 222, 223, 224, 225, 226, 227, 228, -229,
	-230, -231, -5, -4, 141, 36, 32, 24, 23, -255,
	-256, -257, -223, -180, -221, -226, -227, -181, -44, -182,
	-210, -211, 86, 92, 44, 201, 142, 36, 35, 85,
	72, 125, 211, 208, -224, 204, -179, 73, -179, -179,
	-179, -179, -208, 178, -208, -208, -208, 73, 73, -179,
	-179, -179, -219, 73, -219, -219, -220, 73, -220, -258,
	40, 72, 72, 72, -146, 134, 293, 266, 136, 133,
	137, 132, 201, 178, 85, 44, 15, 277, 76, -260,
	125, -215, -196, 308, -81, -66, -116, 249, -74, -160,
	-66, -166, -74, -66, 79, 279, -66, 86, 87, 88,
	-98, -91, -91, -91, -53, 153, 91, -269, -269, -54,
	74, -158, -157, 39, -155, 78, 128, -268, 128, -269,
	-269, -269, 74, 146, 39, -269, -54, -109, -107, 98,
	-57, -269, -269, -269, -269, -269, -79, 19, 143, 51,
	52, 281, 48, 58, -57, -57, -114, -117, -137, 19,
	11, 54, 54, -54, -119, 282, -66, -119, -86, 74,
	12, 100, 128, -163, -162, 39, -160, 78, 146, 128,
	-59, -60, -61, -62, -83, -104, -268, -66, -68, 117,
	-161, -129, -131, -133, 309, 306, 312, 76, -159, -268,
	-268, -237, -216, 100, -216, 125, -215, -216, -216, -216,
	-216, -216, 216, 216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -6, 76, -232,
	-231, 142, 35, 33, -257, 86, 78, 79, 80, 86,
	-43, -222, -136, 255, 260, 261, 36, 36, 78, 8,
	-213, 76, 78, 206, 207, 44, 44, 209, 210, -225,
	205, 79, -208, -208, 45, -228, 78, -228, 79, 79,
	-66, -66, -66, -168, -151, -144, 141, 36, 100, 145,
	138, 138, 138, -216, -216, -216, -147, 30, 22, -249,
	-250, -251, 46, 20, 78, -166, -86, -13, -53, 91,
	-91, -91, -269, -56, -157, 117, -161, -55, -156, -171,
	126, 175, 152, 173, 169, 190, 180, 203, 171, 204,
	-169, -171, 271, -112, 99, -57, 97, 53, 59, -66,
	-58, 11, -89, 45, 54, -19, -268, -268, -89, 45,
	-112, -123, -57, -57, -156, -119, -162, -59, -161, -86,
	74, -63, -64, -65, 62, 66, 68, 63, 64, 65,
	69, -167, 39, -59, -268, -163, -152, 128, 306, 310,
	311, -269, -159, -159, 78, -213, -216, -216, 79, 79,
	79, 78, 78, -216, -216, 79, 78, 76, 79, 79,
	79, 79, 44, 78, 44, 207, 206, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 79, 44,
	79, 44, 79, 44, 76, -154, -2, -1, 146, -6,
	36, -232, 73, -43, 75, 76, 126, 75, 74, 75,
	74, 75, 74, -268, -268, -268, -66, -168, 76, 178,
	-233, 76, -229, -254, 76, 44, -218, 76, 126, 44,
	-212, 79, 44, -251, -250, -216, -216, -74, -91, 128,
	-269, -269, -179, -179, -179, -220, -179, 163, -179, 163,
	-269, -269, -268, -51, 269, -57, -86, -59, -121, 72,
	-122, -100, -102, -101, -268, -19, -118, -159, -120, -159,
	-122, -116, -86, -86, -60, -61, -60, -61, 62, 62,
	62, 67, 62, 67, 62, -64, -160, -269, -84, 70,
	140, 71, -269, -269, -213, -213, 78, 78, 73, -3,
	25, 21, 31, 73, -2, -6, 75, 79, 78, 79,
	79, -239, -238, -155, -239, -239, 45, -254, -254, 117,
	-208, 76, -91, -269, 78, -110, 13, 43, -121, 74,
	-269, -269, -269, 74, 128, 74, -269, -112, 72, 72,
	62, 62, 141, 141, 141, -268, -184, 283, -239, -239,
	73, -2, 75, 75, 75, -269, 74, -179, -269, -269,
	76, -50, 110, 274, -111, 14, 16, 36, -102, 54,
	-19, -268, -159, -155, -159, -116, -57, -57, -268, -268,
	-268, -262, -261, 282, 79, 75, 75, -239, 73, -241,
	-238, -240, -242, -269, 272, 69, 275, -57, -99, 8,
	-100, -19, 128, -85, -155, -85, -85, 74, -269, 76,
	-243, -243, 75, -239, -249, -247, -244, -246, 27, 85,
	146, -249, -245, -244, 274, -249, -244, 59, 273, 276,
	-122, -269, -159, -269, 74, -269, -269, -261, 54, -248,
	27, -1, 85, 274, -243, 75, -216, 78, -253, 25,
	21, 29, 59, -155, 110, -216, 78, 29, -243, 79,
	76, 274, -101, 79, 76, 275, 276,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 697, 0,
	483, 483, 483, 483, 483, 483, 0, 788, 771, 361,
	371, 0, -2, 0, 0, 1015, 388, 398, 404, 1015,
	0, 1015, 1015, 0, 1015, 0, 469, 0, 0, 376,
	377, 378, 1013, 1, 3, 705, 0, 0, 487, 490,
	485, 41, 45, 0, 59, 0, 82, 0, 769, 0,
	0, 0, 769, 75, 76, 789, 0, 359, 772, 0,
	0, 767, 362, 0, 372, 0, 0, 0, 453, 0,
	0, 0, 429, 430, 1015, 0, 433, 0, 435, 705,
	453, 438, 1015, 460, 461, 457, 450, 442, 443, 444,
	459, 126, 0, 0, 762, 763, 764, 0, 466, 467,
	468, 794, 795, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 375, 379, 0, 0, 543, 961, -2, 393,
	403, 399, 400, 401, 402, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 0,
	405, 406, 408, 1015, 410, 411, 0, 0, 414, 0,
	416, 417, 0, 482, 67, 593, 553, 0, 558, 560,
	0, 595, 596, 597, 598, 599, 0, 0, 0, 0,
	0, 0, 621, 622, 623, 624, 683, 684, 685, 686,
	687, 688, 689, 562, 563, 680, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 671, 0, 645, 645, 645,
	645, 645, 645, 645, 645, 0, 0, 0, 0, -2,
	-2, 0, 470, 471, 0, 33, 709, 0, 0, 697,
	35, 0, 483, 488, 489, 493, 491, 492, 484, 771,
	42, 43, 44, 771, 46, 47, 0, 0, 68, 69,
	733, 0, 0, 735, -2, 0, 0, 0, 792, 793,
	-2, 813, 790, 791, 77, 83, 84, 0, 0, 0,
	206, 0, 210, 211, 0, 0, 0, 0, 0, 0,
	0, -2, 360, 798, 799, 767, 0, 0, 0, 373,
	374, 440, 0, 0, 424, 0, 0, 425, 445, 0,
	451, 452, 0, 447, 448, 431, 445, 453, 436, 437,
	439, 127, 128, 462, 369, 382, 380, 381, 394, 0,
	-2, 384, 385, 386, 387, 396, 0, 0, 0, 407,
	409, 412, 0, 413, 783, 418, 419, 420, 0, 0,
	0, 0, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 581, 582, 583, 584, 585, 586, 559,
	0, 573, 0, 0, 0, 615, 616, 617, 618, 619,
	0, 497, 0, 33, 0, 0, 0, 0, 0, 0,
	0, 493, 0, 672, 0, 637, 0, 638, 639, 640,
	641, 642, 643, 644, 0, 497, 0, 0, 0, 479,
	34, 1014, 29, 0, 0, 706, 698, 699, 702, 705,
	33, 490, 0, 495, 494, 486, 0, 0, 0, 0,
	0, 60, 65, 56, 57, 58, 61, 0, 747, 758,
	751, 0, 0, 736, 0, 0, 740, 744, 745, 746,
	307, 743, 0, 0, -2, 332, 216, 283, 213, 214,
	215, 276, 231, 276, 276, 276, 276, 303, 303, 303,
	303, 259, 260, 261, 262, 263, 0, 0, 246, 276,
	276, 276, 250, 266, 267, 268, 269, 270, 271, 272,
	273, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	278, 278, 278, 280, 280, -2, 0, 0, 0, 0,
	132, 0, 358, -2, 114, 0, 0, 123, 0, 0,
	368, 768, 705, 0, 422, 423, 454, 455, 453, 0,
	0, 445, 453, 434, 0, 465, 463, 464, 0, 0,
	544, 796, 797, 389, 390, 391, 0, 784, 785, 594,
	554, 555, 557, 574, 0, 576, 578, 564, 565, 589,
	590, 591, 0, 0, 0, 0, 587, 569, 0, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 614, 656, 657, 0, 612, 613, 620, 0, 0,
	498, 499, 501, 505, 0, 681, 0, -2, 592, 728,
	33, 0, 0, 0, 0, 0, 0, 678, 675, 0,
	0, 646, 0, 0, 0, 0, 472, 481, 710, 0,
	0, 0, 0, 701, 703, 704, 709, 36, 493, 0,
	690, 0, 0, 0, 496, 50, 0, 542, 50, 551,
	730, 0, 680, 0, 526, 0, -2, 0, 0, 63,
	0, 734, 0, 749, 0, 750, 0, 0, 760, 761,
	748, 737, 738, 739, 741, 0, 0, 0, 0, 133,
	-2, 136, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 124, 124, 0, 124,
	124, 124, 124, 124, 0, 0, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 207,
	208, 324, 343, 0, 345, 346, 341, -2, 333, 209,
	217, 218, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 287, 0, 0, 302, 0, 316, 318, 0,
	0, 0, 0, 0, 285, 284, 230, 0, 303, 303,
	253, 254, 255, 0, 256, 257, 258, 0, 0, 247,
	248, 249, 241, 0, 242, 243, 244, 0, 245, 78,
	770, 0, 0, 0, 1015, 783, 0, 780, 0, 778,
	0, 773, 774, 775, 776, 777, 779, 781, 782, 115,
	124, 124, 120, 124, 363, 105, 421, 0, 426, 446,
	445, 551, 432, 370, 395, 0, 415, 575, 577, 579,
	566, 587, 570, 0, 567, 0, 0, 561, 625, 0,
	0, 502, 506, 0, 508, 509, 0, 497, 0, -2,
	628, 629, 0, 0, 0, 0, 697, 0, 676, 0,
	0, 636, 647, 648, 649, 650, 480, 0, 474, 475,
	476, 477, 478, 0, 707, 708, 700, 30, 0, 765,
	766, 691, 692, 510, 0, 0, 541, 0, 697, 0,
	0, 0, 0, 50, 527, 0, 529, 530, 0, 0,
	551, 512, 514, 515, 516, 524, 0, 526, 66, 62,
	61, 759, 752, 753, 0, 0, 757, 308, 0, 0,
	0, 137, 0, 125, 0, 124, 124, 0, 0, 0,
	0, 0, 124, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 325, 324,
	344, 0, 343, 334, 219, 288, 289, 290, 291, 292,
	293, 294, 296, 299, 300, 301, 315, 317, 319, 0,
	306, 201, 202, 309, 310, 311, 312, 313, 314, 212,
	286, 0, 251, 252, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 350, 0, 1015, 786, 787, 0, 0,
	0, 0, 0, 0, 0, 0, 366, 364, 365, 367,
	106, 107, 124, 124, 441, 453, 427, 397, 568, 0,
	588, 571, 626, 500, 507, 503, 0, 0, 682, 0,
	276, 276, 661, 276, 280, 664, 276, 666, 276, 669,
	0, 0, 0, 673, 635, 679, 0, 473, 711, 31,
	551, 0, 722, 0, 0, -2, 0, 0, 39, 0,
	705, 731, 552, 732, 681, 551, 528, 551, -2, 54,
	0, 0, 0, 0, 531, 0, 0, 534, 0, 0,
	0, 0, 525, 0, 0, 545, 64, 0, 754, 755,
	756, 85, 0, 0, 203, 204, 0, 0, 162, 163,
	200, 165, 166, 0, 0, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 0, 337, 0, 0,
	336, 324, 0, 295, 277, 304, 305, 264, 0, 265,
	0, 281, 0, 0, 0, 0, 351, 352, 353, 0,
	355, 356, 357, 118, 90, 91, 119, 129, 130, 131,
	121, 116, 117, 108, 109, 0, 0, 428, 572, 0,
	627, 630, 658, 303, 662, 663, 665, 667, 668, 670,
	632, 631, 0, 0, 0, 677, 693, 511, 37, 0,
	722, 712, 724, 726, 0, 33, 0, 718, 0, 48,
	40, 52, 697, 55, 513, 520, 0, 523, 532, 533,
	535, 0, 537, 0, 539, 540, 517, 518, 519, 0,
	0, 0, 0, 73, 164, 205, 167, 168, 0, 335,
	338, 339, 340, 0, 0, 336, 297, 0, 275, 0,
	0, 0, 347, 276, 0, 0, 0, 110, 111, 504,
	659, 660, 651, 634, 674, 695, 0, 0, 38, 0,
	727, -2, 0, 0, 0, 0, 51, 705, 0, 0,
	536, 538, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 298, 279, 282, 95, 0, 349, 99, 103,
	354, 0, 0, 0, 32, 0, 0, 0, 725, 0,
	-2, 0, 720, 719, 49, 53, 521, 522, 0, 0,
	0, 0, 70, 0, 74, 330, 330, 0, 0, 105,
	348, 105, 105, 633, 0, 0, 0, 696, 694, 0,
	715, 33, 0, 0, 549, 0, 0, 0, 86, 0,
	320, 321, 330, 0, 79, 96, 97, 98, 124, 0,
	0, 80, 100, 101, 0, 81, 104, 652, 0, 655,
	723, -2, 721, 546, 0, 547, 548, 71, 0, 331,
	124, 327, 0, 0, 322, 330, 0, 94, 92, 88,
	89, 0, 653, 550, 0, 0, 328, 0, 323, 93,
	102, 0, 72, 326, 329, 0, 654,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 93, 3, 3, 3, 120, 112, 3,
	73, 75, 117, 115, 74, 116, 128, 118, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 322,
	101, 100, 102, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 123,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 94, 95,
	96, 97, 98, 99, 103, 104, 105, 106, 107, 108,
	109, 110, 113, 114, 119, 121, 124, 125, 126, 127,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/
var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}
type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}
type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}
func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}
func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}
func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4
	if !yyErrorVerbose {
		return "syntax error"
	}
	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}
	res := "syntax error: unexpected " + yyTokname(lookAhead)
	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)
	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}
	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}
		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}
	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}
func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}
out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}
func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}
func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]
	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack
ret0:
	return 0
ret1:
	return 1
yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate
yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}
yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}
		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough
		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3
			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}
				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1
		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}
	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}
	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"
	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]
	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1
	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1111
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1117
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1147
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1155
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1159
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1166
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingClause, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1172
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1186
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1192
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = InsertStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			ins.OnDup = OnDup(yyDollar[8].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1205
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[9].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: InsertStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[9].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1217
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = ReplaceStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			yyVAL.statement = ins
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1229
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: ReplaceStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}}
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = ""
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1257
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1260
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1270
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1274
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1279
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1283
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1289
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereClause, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 53:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1295
		{
			// Single table
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), DeleteOptionList: (yyDollar[3].deleteOptionsList), TableRefs: TableExprs{&AliasedTableExpr{Expr: TableName{Qualifier: yyDollar[5].tableName.Qualifier, Name: yyDollar[5].tableName.Name}, As: yyDollar[6].tableIdent}}, Partitions: yyDollar[7].partitions, Where: NewWhere(WhereClause, yyDollar[8].expr), OrderBy: yyDollar[9].orderBy, Limit: yyDollar[10].limit, IsSingleTable: true}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1300
		{
			// Multi table
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), DeleteOptionList: (yyDollar[3].deleteOptionsList), TableList: yyDollar[4].tableNames, TableRefs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), IsSingleTable: false, IsTableBeforeFrom: false}
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1305
		{
			// Multi table
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), DeleteOptionList: (yyDollar[3].deleteOptionsList), TableList: yyDollar[5].tableNames, TableRefs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr), IsSingleTable: false, IsTableBeforeFrom: false}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1312
		{
			yyVAL.deleteOption = QuickOption
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1316
		{
			yyVAL.deleteOption = LowPriorityOption
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1320
		{
			yyVAL.deleteOption = IgnoreOption
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1325
		{
			yyVAL.deleteOptionsList = []DeleteOptionEnum{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1329
		{
			yyVAL.deleteOptionsList = append(yyDollar[1].deleteOptionsList, yyDollar[2].deleteOption)
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1334
		{
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1336
		{
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1340
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1350
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1354
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1360
		{
			yyVAL.statement = &Do{Exprs: yyDollar[2].exprs}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1376
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1380
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1386
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1392
		{
			yyVAL.optVal = nil
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1396
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1406
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1410
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1416
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1423
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 79:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 80:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 81:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1445
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1449
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1453
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1457
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1463
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 87:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1470
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1479
		{
			yyVAL.str = "hash"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1483
		{
			yyVAL.str = "btree"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1489
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1493
		{
			yyVAL.str = "default"
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1500
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1516
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1524
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1528
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1534
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1543
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1553
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1557
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1565
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1574
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1588
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1595
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1611
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1646
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1650
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1656
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.str = "default"
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1686
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1693
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1700
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1707
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1714
		{
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1719
		{
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1729
		{
			yyVAL.str = "character set"
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = "char set"
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1747
		{
			yyVAL.str = "default"
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1753
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1764
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1845
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1849
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1859
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1872
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1879
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1886
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1900
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1935
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1977
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1998
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2012
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2035
		{
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2039
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2045
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2051
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2070
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2076
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2082
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2104
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2117
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2135
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2139
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2161
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2165
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2185
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2205
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2211
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2215
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2236
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2276
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2282
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2293
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2297
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2303
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2319
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2329
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2339
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2343
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2349
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2359
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2373
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2394
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2401
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2422
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2436
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2480
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2492
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2504
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2630
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2635
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2640
		{
			yyVAL.optVal = nil
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2644
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2649
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2653
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2661
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2665
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2671
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2679
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2688
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2709
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2713
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2721
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2725
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2729
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2739
		{
			yyVAL.str = yyDollar[3].str
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2749
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2753
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2776
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2781
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2785
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2801
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2805
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2815
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2819
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2825
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2835
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2841
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2858
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2864
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2870
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2882
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 322:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2896
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 323:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2907
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2923
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2927
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2947
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2962
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2966
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2972
		{
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2975
		{
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2984
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2989
		{
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3006
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3012
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3016
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3021
		{
			// set empty
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3026
		{
			yyVAL.str = yyDollar[1].str
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3047
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3053
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3059
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3063
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 352:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3068
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3073
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3077
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3081
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3085
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3089
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3093
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3098
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3107
		{
			yyVAL.byt = 0
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.byt = 1
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3116
		{
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
		}
	case 366:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3124
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 367:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3136
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3140
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3154
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3160
		{
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3166
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3172
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3178
		{
			yyVAL.statement = &Xa{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3184
		{
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3188
		{
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3191
		{
			yyVAL.showFilter = nil
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3205
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3211
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3232
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3236
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3240
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3244
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3258
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3262
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3267
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3271
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3276
		{
			yyVAL.optVal = nil
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3280
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3300
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3305
		{
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3307
		{
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3309
		{
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3313
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3319
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3323
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3327
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3331
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3337
		{
			yyVAL.statement = &NeoDB{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3341
		{
			yyVAL.statement = &NeoDB{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3345
		{
			yyVAL.statement = &NeoDB{Action: AttachListStr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3349
		{
			yyVAL.statement = &NeoDB{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3353
		{
			yyVAL.statement = &NeoDB{Action: CleanupStr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3357
		{
			yyVAL.statement = &NeoDB{Action: RebalanceStr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3361
		{
			yyVAL.statement = &NeoDB{Action: XARecoverStr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3365
		{
			yyVAL.statement = &NeoDB{Action: XACommitStr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3369
		{
			yyVAL.statement = &NeoDB{Action: XARollbackStr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3375
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3379
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3383
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3387
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr, Filter: yyDollar[3].showFilter}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3391
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3395
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableIdent, Filter: yyDollar[5].showFilter}
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3399
		{
			if yyDollar[5].tableIdent.v != "" {
				yyDollar[4].tableName.Qualifier = yyDollar[5].tableIdent
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 428:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3410
		{
			if yyDollar[6].tableIdent.v != "" {
				yyDollar[5].tableName.Qualifier = yyDollar[6].tableIdent
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3417
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3421
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3425
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3429
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableIdent, Filter: yyDollar[5].showFilter}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3433
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3437
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr, Scope: yyDollar[2].str, Filter: yyDollar[4].showFilter}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3441
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3445
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr, Limit: yyDollar[3].limit}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3449
		{
			yyVAL.statement = &Show{Type: ShowCollationStr, Filter: yyDollar[3].showFilter}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3453
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3457
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3462
		{
			yyVAL.str = ""
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3466
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3472
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3480
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3486
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3490
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3496
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3500
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3506
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3510
		{
			yyVAL.str = "full "
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3516
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3520
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3526
		{
			yyVAL.showFilter = nil
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3530
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3534
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3540
		{
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3542
		{
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3546
		{
			yyVAL.str = ""
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3550
		{
			yyVAL.str = yyDollar[1].str
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3565
		{
			yyVAL.checksumOptionEnum = ChecksumOptionNone
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.checksumOptionEnum = ChecksumOptionQuick
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.checksumOptionEnum = ChecksumOptionExtended
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3579
		{
			yyVAL.statement = &Checksum{Tables: yyDollar[3].tableNames, ChecksumOption: yyDollar[4].checksumOptionEnum}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3585
		{
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3587
		{
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3591
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3596
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNone
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3600
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNoWriteToBinlog
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3604
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionLocal
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3610
		{
			yyVAL.statement = &Optimize{OptimizeOption: yyDollar[2].optimizeOptionEnum, Tables: yyDollar[4].tableNames}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3616
		{
			yyVAL.checkOptionEnum = CheckOptionForUpgrade
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3620
		{
			yyVAL.checkOptionEnum = CheckOptionQuick
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3624
		{
			yyVAL.checkOptionEnum = CheckOptionFast
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3628
		{
			yyVAL.checkOptionEnum = CheckOptionMedium
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3632
		{
			yyVAL.checkOptionEnum = CheckOptionExtended
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3636
		{
			yyVAL.checkOptionEnum = CheckOptionChanged
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3641
		{
			yyVAL.checkOptionList = []CheckOptionEnum{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3645
		{
			yyVAL.checkOptionList = append(yyDollar[1].checkOptionList, yyDollar[2].checkOptionEnum)
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3652
		{
			yyVAL.statement = &Check{Tables: yyDollar[3].tableNames, CheckOptions: yyDollar[4].checkOptionList}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3658
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3663
		{
			setAllowComments(yylex, true)
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3666
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3672
		{
			yyVAL.bytes2 = nil
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3676
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3682
		{
			yyVAL.str = UnionStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3686
		{
			yyVAL.str = UnionAllStr
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3690
		{
			yyVAL.str = UnionDistinctStr
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3695
		{
			yyVAL.str = ""
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3699
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3703
		{
			yyVAL.str = SQLCacheStr
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3708
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3712
		{
			yyVAL.str = DistinctStr
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3717
		{
			yyVAL.str = ""
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3721
		{
			yyVAL.str = StraightJoinHint
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3726
		{
			yyVAL.selectExprs = nil
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3730
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3736
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3740
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3746
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3750
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3754
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3758
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3763
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3767
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3771
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3778
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3783
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3787
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3793
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3797
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3807
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3811
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3815
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3821
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3834
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3838
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3842
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3846
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3851
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3855
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3860
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3864
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3868
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3875
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3881
		{
			yyVAL.str = JoinStr
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3885
		{
			yyVAL.str = JoinStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3889
		{
			yyVAL.str = JoinStr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3893
		{
			yyVAL.str = StraightJoinStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3899
		{
			yyVAL.str = LeftJoinStr
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3903
		{
			yyVAL.str = LeftJoinStr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3907
		{
			yyVAL.str = RightJoinStr
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3911
		{
			yyVAL.str = RightJoinStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3917
		{
			yyVAL.str = NaturalJoinStr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3921
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3931
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3935
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3941
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3945
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3950
		{
			yyVAL.indexHints = nil
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3954
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3958
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3962
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3968
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3972
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3977
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3981
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3987
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3991
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3995
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3999
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4003
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4007
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4011
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4017
		{
			yyVAL.str = ""
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4021
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4027
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4037
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4041
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4045
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4049
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4053
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4057
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4061
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4065
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4069
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4073
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4079
		{
			yyVAL.str = IsNullStr
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4083
		{
			yyVAL.str = IsNotNullStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4087
		{
			yyVAL.str = IsTrueStr
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4091
		{
			yyVAL.str = IsNotTrueStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4095
		{
			yyVAL.str = IsFalseStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4099
		{
			yyVAL.str = IsNotFalseStr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4105
		{
			yyVAL.str = EqualStr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4109
		{
			yyVAL.str = LessThanStr
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4113
		{
			yyVAL.str = GreaterThanStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4117
		{
			yyVAL.str = LessEqualStr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4121
		{
			yyVAL.str = GreaterEqualStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4125
		{
			yyVAL.str = NotEqualStr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4129
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4134
		{
			yyVAL.expr = nil
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4138
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4144
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4148
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4152
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4158
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4164
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4168
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4174
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4178
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4182
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4186
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4190
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4194
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4198
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4202
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4206
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4210
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4226
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4230
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4250
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4254
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4258
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4266
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4280
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4284
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4288
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4306
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4310
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 627:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4314
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4324
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4328
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 630:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4332
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 631:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4336
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 632:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4340
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 633:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:4344
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 634:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:4348
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4352
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4356
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4366
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4370
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4374
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4398
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4413
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4417
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4425
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4431
		{
			yyVAL.str = ""
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4435
		{
			yyVAL.str = BooleanModeStr
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4439
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 654:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:4443
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4447
		{
			yyVAL.str = QueryExpansionStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4453
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4457
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4463
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4467
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4471
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4475
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4479
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4483
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4489
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4493
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4497
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4501
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4505
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4509
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4513
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4518
		{
			yyVAL.expr = nil
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4522
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4527
		{
			yyVAL.str = string("")
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4531
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4537
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4541
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4547
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4552
		{
			yyVAL.expr = nil
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4556
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4562
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4566
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4570
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4576
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4580
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4584
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4588
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4592
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4596
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4600
		{
			yyVAL.expr = &NullVal{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4606
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4615
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4619
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4624
		{
			yyVAL.exprs = nil
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4628
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4633
		{
			yyVAL.expr = nil
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4637
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4642
		{
			yyVAL.orderBy = nil
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4646
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4652
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4656
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4662
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4667
		{
			yyVAL.str = AscScr
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4671
		{
			yyVAL.str = AscScr
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4675
		{
			yyVAL.str = DescScr
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4680
		{
			yyVAL.limit = nil
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4684
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4688
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4692
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4697
		{
			yyVAL.str = ""
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4701
		{
			yyVAL.str = ForUpdateStr
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4705
		{
			yyVAL.str = ShareModeStr
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4718
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4722
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4726
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4731
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4735
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 717:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4739
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4746
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4750
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4754
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4758
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4763
		{
			yyVAL.updateExprs = nil
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4767
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4773
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4777
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4783
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4787
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4793
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4799
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4809
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4813
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4819
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4825
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4829
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4835
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4839
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4846
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4850
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4854
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4858
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4862
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4869
		{
			yyVAL.bytes = []byte("charset")
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4875
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4879
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4883
		{
			yyVAL.expr = &Default{}
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4889
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4893
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4899
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4903
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4909
		{
			yyVAL.str = ""
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4913
		{
			yyVAL.str = yyDollar[2].str
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4919
		{
			yyVAL.str = yyDollar[3].str
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4925
		{
			yyVAL.str = RepeatableRead
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4929
		{
			yyVAL.str = ReadCommitted
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4933
		{
			yyVAL.str = ReadUncommitted
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4937
		{
			yyVAL.str = Serializable
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4943
		{
			yyVAL.str = ""
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4947
		{
			yyVAL.str = yyDollar[2].str
		}
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4953
		{
			yyVAL.str = TxReadWrite
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4957
		{
			yyVAL.str = TxReadOnly
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4963
		{
			yyVAL.str = SessionStr
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4967
		{
			yyVAL.str = SessionStr
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4971
		{
			yyVAL.str = GlobalStr
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4980
		{
			yyVAL.byt = 0
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4984
		{
			yyVAL.byt = 1
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4989
		{
			yyVAL.byt = 0
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4993
		{
			yyVAL.byt = 1
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4998
		{
			yyVAL.str = ""
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5002
		{
			yyVAL.str = IgnoreStr
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5008
		{
			yyVAL.empty = struct{}{}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5012
		{
			yyVAL.empty = struct{}{}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5016
		{
			yyVAL.empty = struct{}{}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5020
		{
			yyVAL.empty = struct{}{}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5024
		{
			yyVAL.empty = struct{}{}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5028
		{
			yyVAL.empty = struct{}{}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5032
		{
			yyVAL.empty = struct{}{}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5036
		{
			yyVAL.empty = struct{}{}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5040
		{
			yyVAL.empty = struct{}{}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5044
		{
			yyVAL.empty = struct{}{}
		}
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:5049
		{
			yyVAL.empty = struct{}{}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5053
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5057
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5063
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5067
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:5072
		{
			yyVAL.str = IndexStr
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5076
		{
			yyVAL.str = UniqueStr
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5082
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5086
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5093
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5099
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5103
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5110
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5116
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5120
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5360
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5369
		{
			decNesting(yylex)
		}
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:5374
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
